var index = [
{'name': 'ceylon.language', 'type': 'package', 'url': 'index.html#section-package', 'doc': '<p>The Ceylon language package.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'process.arguments', 'type': 'value', 'url': 'object_process.html#arguments', 'doc': '<p>The command line arguments to the virtual machine.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.namedArgumentPresent', 'type': 'function', 'url': 'object_process.html#namedArgumentPresent', 'doc': '<p>Determine if an argument of form <code>-name</code> or <code>--name</code>\nwas specified among the command line arguments to\nthe virtual…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.namedArgumentValue', 'type': 'function', 'url': 'object_process.html#namedArgumentValue', 'doc': '<p>The value of the first argument of form <code>-name=value</code>,\n<code>--name=value</code>, or <code>-name value</code> specified among the\ncommand…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.propertyValue', 'type': 'function', 'url': 'object_process.html#propertyValue', 'doc': '<p>The value of the given system property of the virtual\nmachine, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.newline', 'type': 'value', 'url': 'object_process.html#newline', 'doc': '<p>The line ending character sequence on this platform.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.write', 'type': 'function', 'url': 'object_process.html#write', 'doc': '<p>Print a string to the standard output of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.writeLine', 'type': 'function', 'url': 'object_process.html#writeLine', 'doc': '<p>Print a line to the standard output of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.writeError', 'type': 'function', 'url': 'object_process.html#writeError', 'doc': '<p>Print a string to the standard error of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.writeErrorLine', 'type': 'function', 'url': 'object_process.html#writeErrorLine', 'doc': '<p>Print a line to the standard error of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.readLine', 'type': 'function', 'url': 'object_process.html#readLine', 'doc': '<p>Read a line of input text from the standard input\nof the virtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.milliseconds', 'type': 'value', 'url': 'object_process.html#milliseconds', 'doc': '<p>The elapsed time in milliseconds since midnight,\n1 January 1970.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.nanoseconds', 'type': 'value', 'url': 'object_process.html#nanoseconds', 'doc': '<p>The elapsed time in nanoseconds since an arbitrary\nstarting point.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.exit', 'type': 'function', 'url': 'object_process.html#exit', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.vm', 'type': 'value', 'url': 'object_process.html#vm', 'doc': '<p>Returns the name of the virtual machine this\nprocess is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.vmVersion', 'type': 'value', 'url': 'object_process.html#vmVersion', 'doc': '<p>Returns the version of the virtual machine this\nprocess is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.os', 'type': 'value', 'url': 'object_process.html#os', 'doc': '<p>Returns the name of the operating system this\nprocess is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.osVersion', 'type': 'value', 'url': 'object_process.html#osVersion', 'doc': '<p>Returns the version of the operating system this\nprocess is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.string', 'type': 'attribute', 'url': 'object_process.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'process', 'type': 'object', 'url': 'object_process.html', 'doc': '<p>Represents the current process (instance of the virtual\nmachine).</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'process', 'type': 'value', 'url': 'index.html#process', 'doc': '<p>Represents the current process (instance of the virtual\nmachine).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'zip', 'type': 'function', 'url': 'index.html#zip', 'doc': '<p>Given two sequences, form a new sequence consisting of\nall entries where, for any given index in the resulting\nsequence…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Boolean', 'type': 'class', 'url': 'class_Boolean.html', 'doc': '<p>A type capable of representing the values true and\nfalse of Boolean logic.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'true.string', 'type': 'attribute', 'url': 'object_true.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'true', 'type': 'object', 'url': 'object_true.html', 'doc': '<p>A value representing truth in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'true', 'type': 'value', 'url': 'index.html#true', 'doc': '<p>A value representing truth in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'false.string', 'type': 'attribute', 'url': 'object_false.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'false', 'type': 'object', 'url': 'object_false.html', 'doc': '<p>A value representing falsity in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'false', 'type': 'value', 'url': 'index.html#false', 'doc': '<p>A value representing falsity in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Range.first', 'type': 'value', 'url': 'class_Range.html#first', 'doc': '<p>The start of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.last', 'type': 'value', 'url': 'class_Range.html#last', 'doc': '<p>The end of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.string', 'type': 'attribute', 'url': 'class_Range.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.decreasing', 'type': 'attribute', 'url': 'class_Range.html#decreasing', 'doc': '<p>Determines if the range is decreasing.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Range.size', 'type': 'attribute', 'url': 'class_Range.html#size', 'doc': '<p>The nonzero number of elements in the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.lastIndex', 'type': 'attribute', 'url': 'class_Range.html#lastIndex', 'doc': '<p>The index of the end of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.rest', 'type': 'attribute', 'url': 'class_Range.html#rest', 'doc': '<p>The rest of the range, without the start of the\nrange.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.get', 'type': 'function', 'url': 'class_Range.html#get', 'doc': '<p>The element of the range that occurs <code>n</code> values after\nthe start of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.iterator', 'type': 'function', 'url': 'class_Range.html#iterator', 'doc': '<p>An iterator for the elements of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.by', 'type': 'function', 'url': 'class_Range.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.contains', 'type': 'function', 'url': 'class_Range.html#contains', 'doc': '<p>Determines if the range includes the given object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.count', 'type': 'function', 'url': 'class_Range.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.includes', 'type': 'function', 'url': 'class_Range.html#includes', 'doc': '<p>Determines if the range includes the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Range.clone', 'type': 'attribute', 'url': 'class_Range.html#clone', 'doc': '<p>Returns the range itself, since ranges are\nimmutable.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.segment', 'type': 'function', 'url': 'class_Range.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.span', 'type': 'function', 'url': 'class_Range.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.spanTo', 'type': 'function', 'url': 'class_Range.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.spanFrom', 'type': 'function', 'url': 'class_Range.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.reversed', 'type': 'attribute', 'url': 'class_Range.html#reversed', 'doc': '<p>Reverse this range, returning a new range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.skipping', 'type': 'function', 'url': 'class_Range.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.taking', 'type': 'function', 'url': 'class_Range.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.coalesced', 'type': 'attribute', 'url': 'class_Range.html#coalesced', 'doc': '<p>Returns the range itself, since a Range cannot\ncontain nulls.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.sequence', 'type': 'attribute', 'url': 'class_Range.html#sequence', 'doc': '<p>Returns this range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range', 'type': 'class', 'url': 'class_Range.html', 'doc': '<p>Represents the range of totally ordered, ordinal values\ngenerated by two endpoints of type <code>Ordinal</code> and\n<code>Comparable</code>…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'max', 'type': 'function', 'url': 'index.html#max', 'doc': '<p>Given a nonempty sequence of <code>Comparable</code> values,\nreturn the largest value in the sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'byIncreasing', 'type': 'function', 'url': 'index.html#byIncreasing', 'doc': '<p>A comparator which orders elements in increasing order\naccording to the <code>Comparable</code> returned by the given\n`…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Basic', 'type': 'class', 'url': 'class_Basic.html', 'doc': '<p>The default superclass when no superclass is explicitly\nspecified using <code>extends</code>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'Comparison.largerThan', 'type': 'function', 'url': 'class_Comparison.html#largerThan', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.smallerThan', 'type': 'function', 'url': 'class_Comparison.html#smallerThan', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.equal', 'type': 'function', 'url': 'class_Comparison.html#equal', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.unequal', 'type': 'function', 'url': 'class_Comparison.html#unequal', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.asLargeAs', 'type': 'function', 'url': 'class_Comparison.html#asLargeAs', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.asSmallAs', 'type': 'function', 'url': 'class_Comparison.html#asSmallAs', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison', 'type': 'class', 'url': 'class_Comparison.html', 'doc': '<p>The result of a comparison between two <code>Comparable</code>\nobjects.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'equal', 'type': 'object', 'url': 'object_equal.html', 'doc': '<p>The value is exactly equal to the given value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'equal', 'type': 'value', 'url': 'index.html#equal', 'doc': '<p>The value is exactly equal to the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'smaller', 'type': 'object', 'url': 'object_smaller.html', 'doc': '<p>The value is smaller than the given value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'smaller', 'type': 'value', 'url': 'index.html#smaller', 'doc': '<p>The value is smaller than the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'larger', 'type': 'object', 'url': 'object_larger.html', 'doc': '<p>The value is larger than the given value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'larger', 'type': 'value', 'url': 'index.html#larger', 'doc': '<p>The value is larger than the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Collection.empty', 'type': 'attribute', 'url': 'interface_Collection.html#empty', 'doc': '<p>Determine if the collection is empty, that is, if\nit has no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Collection.contains', 'type': 'function', 'url': 'interface_Collection.html#contains', 'doc': '<p>Return <code>true</code> if the given object is an element of\nthis collection.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Collection.string', 'type': 'attribute', 'url': 'interface_Collection.html#string', 'doc': '<p>A string of form <code>"{ x, y, z }"</code> where <code>x</code>, <code>y</code>,\nand <code>z</code> are the <code>string</code> representations of the\nelements of this…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Collection', 'type': 'interface', 'url': 'interface_Collection.html', 'doc': '<p>Represents an iterable collection of elements of finite\nsize.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Integer.character', 'type': 'value', 'url': 'class_Integer.html#character', 'doc': '<p>The UTF-32 character with this UCS code point.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Integer', 'type': 'class', 'url': 'class_Integer.html', 'doc': '<p>A 64-bit integer, or the closest approximation to a\n64-bit integer provided by the underlying platform</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'parseInteger', 'type': 'function', 'url': 'index.html#parseInteger', 'doc': '<p>The <code>Integer</code> value of the given string representation\nof an integer, or <code>null</code> if the string does not represent\nan…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.characters', 'type': 'value', 'url': 'class_String.html#characters', 'doc': '<p>The characters in this string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.lowercased', 'type': 'value', 'url': 'class_String.html#lowercased', 'doc': '<p>This string, with all characters in lowercase.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.uppercased', 'type': 'value', 'url': 'class_String.html#uppercased', 'doc': '<p>This string, with all characters in uppercase.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.split', 'type': 'function', 'url': 'class_String.html#split', 'doc': '<p>Split the string into tokens, using the given\npredicate to determine which characters are\nseparator characters.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.rest', 'type': 'value', 'url': 'class_String.html#rest', 'doc': '<p>The rest of the string, without the first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'String.join', 'type': 'function', 'url': 'class_String.html#join', 'doc': '<p>Join the given strings, using this string as a\nseparator.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.lines', 'type': 'value', 'url': 'class_String.html#lines', 'doc': '<p>Split the string into lines of text.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.trimmed', 'type': 'value', 'url': 'class_String.html#trimmed', 'doc': '<p>This string, after discarding\n<a class=\'link\' href=\'class_Character.html#whitespace\'>whitespace</a> from the\nbeginning and end of the string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.trimCharacters', 'type': 'function', 'url': 'class_String.html#trimCharacters', 'doc': '<p>This string, after discarding the given\ncharacters from the beginning and end\nof the string</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.trimLeadingCharacters', 'type': 'function', 'url': 'class_String.html#trimLeadingCharacters', 'doc': '<p>This string, after discarding the given\ncharacters from the beginning of the string</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.trimTrailingCharacters', 'type': 'function', 'url': 'class_String.html#trimTrailingCharacters', 'doc': '<p>This string, after discarding the given\ncharacters from the end of the string</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.normalized', 'type': 'value', 'url': 'class_String.html#normalized', 'doc': '<p>This string, after collapsing strings of\n<a class=\'link\' href=\'class_Character.html#whitespace\'>whitespace</a>\ninto single space characters and…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.reversed', 'type': 'value', 'url': 'class_String.html#reversed', 'doc': '<p>This string, with the characters in reverse order.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.span', 'type': 'function', 'url': 'class_String.html#span', 'doc': '<p>Select the characters between the given indexes.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.spanFrom', 'type': 'function', 'url': 'class_String.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.spanTo', 'type': 'function', 'url': 'class_String.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.segment', 'type': 'function', 'url': 'class_String.html#segment', 'doc': '<p>Select the characters of this string beginning at\nthe given index, returning a string no longer than\nthe given length…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.initial', 'type': 'function', 'url': 'class_String.html#initial', 'doc': '<p>Select the first characters of this string,\nreturning a string no longer than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.terminal', 'type': 'function', 'url': 'class_String.html#terminal', 'doc': '<p>Select the last characters of the string,\nreturning a string no longer than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.size', 'type': 'value', 'url': 'class_String.html#size', 'doc': '<p>The length of the string (the number of characters\nit contains).</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'String.lastIndex', 'type': 'attribute', 'url': 'class_String.html#lastIndex', 'doc': '<p>The index of the last character in the string, or\n<code>null</code> if the string has no characters.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.iterator', 'type': 'function', 'url': 'class_String.html#iterator', 'doc': '<p>An iterator for the characters of the string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.get', 'type': 'function', 'url': 'class_String.html#get', 'doc': '<p>Returns the character at the given index in the\nstring, or <code>null</code> if the index is past the end of\nstring.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.occurrences', 'type': 'function', 'url': 'class_String.html#occurrences', 'doc': '<p>The character indexes at which the given substring\noccurs within this string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.firstOccurrence', 'type': 'function', 'url': 'class_String.html#firstOccurrence', 'doc': '<p>The first index at which the given substring occurs\nwithin this string, or <code>null</code> if the substring does\nnot occur in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.lastOccurrence', 'type': 'function', 'url': 'class_String.html#lastOccurrence', 'doc': '<p>The last index at which the given substring occurs\nwithin this string, or <code>null</code> if the substring does\nnot occur in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.firstCharacterOccurrence', 'type': 'function', 'url': 'class_String.html#firstCharacterOccurrence', 'doc': '<p>The first index at which the given character occurs\nwithin this string, or <code>null</code> if the character does\nnot occur in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.lastCharacterOccurrence', 'type': 'function', 'url': 'class_String.html#lastCharacterOccurrence', 'doc': '<p>The last index at which the given character occurs\nwithin this string, or <code>null</code> if the character does\nnot occur in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.contains', 'type': 'function', 'url': 'class_String.html#contains', 'doc': '<p>Determines if the given object is a <code>String</code> and,\nif so, if it occurs as a substring of this string,\nor if the object…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.startsWith', 'type': 'function', 'url': 'class_String.html#startsWith', 'doc': '<p>Determines if this string starts with the given\nsubstring.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.endsWith', 'type': 'function', 'url': 'class_String.html#endsWith', 'doc': '<p>Determines if this string ends with the given\nsubstring.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.plus', 'type': 'function', 'url': 'class_String.html#plus', 'doc': '<p>Returns the concatenation of this string with the\ngiven string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.repeat', 'type': 'function', 'url': 'class_String.html#repeat', 'doc': '<p>Returns a string formed by repeating this string\nthe given number of times.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.replace', 'type': 'function', 'url': 'class_String.html#replace', 'doc': '<p>Returns a string formed by replacing every\noccurrence in this string of the given substring\nwith the given replacement…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.compare', 'type': 'function', 'url': 'class_String.html#compare', 'doc': '<p>Compare this string with the given string\nlexicographically, according to the Unicode values\nof the characters.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.longerThan', 'type': 'function', 'url': 'class_String.html#longerThan', 'doc': '<p>Determines if this string is longer than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.shorterThan', 'type': 'function', 'url': 'class_String.html#shorterThan', 'doc': '<p>Determines if this string is shorter than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'String.equals', 'type': 'function', 'url': 'class_String.html#equals', 'doc': '<p>Determines if the given object is a string, and if\nso, if this string has the same length, and the\nsame characters, in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.hash', 'type': 'value', 'url': 'class_String.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.string', 'type': 'attribute', 'url': 'class_String.html#string', 'doc': '<p>Returns the string itself.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.empty', 'type': 'value', 'url': 'class_String.html#empty', 'doc': '<p>Determines if this string has no characters, that\nis, if it has zero <code>size</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'String.coalesced', 'type': 'attribute', 'url': 'class_String.html#coalesced', 'doc': '<p>Returns this string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String', 'type': 'class', 'url': 'class_String.html', 'doc': '<p>A string of characters.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'string', 'type': 'function', 'url': 'index.html#string', 'doc': '<p>Create a new string containing the given characters.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.get', 'type': 'function', 'url': 'interface_Correspondence.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Correspondence.defines', 'type': 'function', 'url': 'interface_Correspondence.html#defines', 'doc': '<p>Determines if there is a value defined for the\ngiven key.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.keys', 'type': 'attribute', 'url': 'interface_Correspondence.html#keys', 'doc': '<p>The <code>Category</code> of all keys for which a value is\ndefined by this <code>Correspondence</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.definesEvery', 'type': 'function', 'url': 'interface_Correspondence.html#definesEvery', 'doc': '<p>Determines if this <code>Correspondence</code> defines a value\nfor every one of the given keys.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.definesAny', 'type': 'function', 'url': 'interface_Correspondence.html#definesAny', 'doc': '<p>Determines if this <code>Correspondence</code> defines a value\nfor any one of the given keys.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.items', 'type': 'function', 'url': 'interface_Correspondence.html#items', 'doc': '<p>Returns the items defined for the given keys, in\nthe same order as the corresponding keys.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence', 'type': 'interface', 'url': 'interface_Correspondence.html', 'doc': '<p>Abstract supertype of objects which associate values\nwith keys.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Object.equals', 'type': 'function', 'url': 'class_Object.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Object.hash', 'type': 'value', 'url': 'class_Object.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Object.string', 'type': 'attribute', 'url': 'class_Object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Object', 'type': 'class', 'url': 'class_Object.html', 'doc': '<p>The abstract supertype of all types representing\ndefinite values.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'times', 'type': 'function', 'url': 'index.html#times', 'doc': '<p>Multiply the given <code>Numeric</code> values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'smallest', 'type': 'function', 'url': 'index.html#smallest', 'doc': '<p>Given two <code>Comparable</code> values, return smallest of the\ntwo.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Sequence.lastIndex', 'type': 'value', 'url': 'interface_Sequence.html#lastIndex', 'doc': '<p>The index of the last element of the sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequence.first', 'type': 'value', 'url': 'interface_Sequence.html#first', 'doc': '<p>The first element of the sequence, that is, the\nelement with index <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequence.last', 'type': 'value', 'url': 'interface_Sequence.html#last', 'doc': '<p>The last element of the sequence, that is, the\nelement with index <code>sequence.lastIndex</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequence.empty', 'type': 'attribute', 'url': 'interface_Sequence.html#empty', 'doc': '<p>Returns <code>false</code>, since every <code>Sequence</code> contains at\nleast one element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Sequence.reversed', 'type': 'value', 'url': 'interface_Sequence.html#reversed', 'doc': '<p>Reverse this sequence, returning a new nonempty\nsequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequence.sequence', 'type': 'attribute', 'url': 'interface_Sequence.html#sequence', 'doc': '<p>This sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.rest', 'type': 'value', 'url': 'interface_Sequence.html#rest', 'doc': '<p>The rest of the sequence, without the first\nelement.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Sequence.sort', 'type': 'function', 'url': 'interface_Sequence.html#sort', 'doc': '<p>A nonempty sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.collect', 'type': 'function', 'url': 'interface_Sequence.html#collect', 'doc': '<p>A nonempty sequence containing the results of\napplying the given mapping to the elements of this\nsequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.clone', 'type': 'attribute', 'url': 'interface_Sequence.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Sequence.string', 'type': 'attribute', 'url': 'interface_Sequence.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence', 'type': 'interface', 'url': 'interface_Sequence.html', 'doc': '<p>A nonempty, immutable sequence of values.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'forItem', 'type': 'function', 'url': 'index.html#forItem', 'doc': '<p>A function that returns the result of the given <code>resulting()</code> function\non the item of a given <code>Entry</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Entry.key', 'type': 'value', 'url': 'class_Entry.html#key', 'doc': '<p>The key used to access the entry.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Entry.item', 'type': 'value', 'url': 'class_Entry.html#item', 'doc': '<p>The value associated with the key.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Entry.equals', 'type': 'function', 'url': 'class_Entry.html#equals', 'doc': '<p>Determines if this entry is equal to the given\nentry.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Entry.hash', 'type': 'attribute', 'url': 'class_Entry.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Entry.string', 'type': 'attribute', 'url': 'class_Entry.html#string', 'doc': '<p>Returns a description of the entry in the form\n<code>key-&gt;item</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Entry', 'type': 'class', 'url': 'class_Entry.html', 'doc': '<p>A pair containing a <em>key</em> and an associated value called\nthe <em>item</em>.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Integral.remainder', 'type': 'function', 'url': 'interface_Integral.html#remainder', 'doc': '<p>The remainder, after dividing this number by the\ngiven number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Integral.zero', 'type': 'value', 'url': 'interface_Integral.html#zero', 'doc': '<p>Determine if the number is zero.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Integral.unit', 'type': 'value', 'url': 'interface_Integral.html#unit', 'doc': '<p>Determine if the number is one.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Integral', 'type': 'interface', 'url': 'interface_Integral.html', 'doc': '<p>Abstraction of integral numeric types.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'lessThan', 'type': 'function', 'url': 'index.html#lessThan', 'doc': '<p>Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'plus', 'type': 'function', 'url': 'index.html#plus', 'doc': '<p>Add the given <code>Summable</code> values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'coalesce', 'type': 'function', 'url': 'index.html#coalesce', 'doc': '<p>Return a sequence containing the given values which are\nnot null.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exception.cause', 'type': 'value', 'url': 'class_Exception.html#cause', 'doc': '<p>The underlying cause of this exception.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exception.message', 'type': 'attribute', 'url': 'class_Exception.html#message', 'doc': '<p>A message describing the problem.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exception.string', 'type': 'attribute', 'url': 'class_Exception.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Exception.printStackTrace', 'type': 'function', 'url': 'class_Exception.html#printStackTrace', 'doc': '<p>Print the stack trace to the standard error of\nthe virtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exception', 'type': 'class', 'url': 'class_Exception.html', 'doc': '<p>The supertype of all exceptions.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'language.version', 'type': 'value', 'url': 'object_language.html#version', 'doc': '<p>The Ceylon language version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.majorVersion', 'type': 'value', 'url': 'object_language.html#majorVersion', 'doc': '<p>The Ceylon language major version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.minorVersion', 'type': 'value', 'url': 'object_language.html#minorVersion', 'doc': '<p>The Ceylon language minor version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.releaseVersion', 'type': 'value', 'url': 'object_language.html#releaseVersion', 'doc': '<p>The Ceylon language release version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.versionName', 'type': 'value', 'url': 'object_language.html#versionName', 'doc': '<p>The Ceylon language release name.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.majorVersionBinary', 'type': 'value', 'url': 'object_language.html#majorVersionBinary', 'doc': '<p>The major version of the code generated for the underlying runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.minorVersionBinary', 'type': 'value', 'url': 'object_language.html#minorVersionBinary', 'doc': '<p>The minor version of the code generated for the underlying runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language', 'type': 'object', 'url': 'object_language.html', 'doc': '<p>Contains information about the language</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'language', 'type': 'value', 'url': 'index.html#language', 'doc': '<p>Contains information about the language</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.string', 'type': 'value', 'url': 'class_Character.html#string', 'doc': '<p>A string containg just this character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Character.lowercased', 'type': 'value', 'url': 'class_Character.html#lowercased', 'doc': '<p>The lowercase representation of this character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.uppercased', 'type': 'value', 'url': 'class_Character.html#uppercased', 'doc': '<p>The uppercase representation of this character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.titlecased', 'type': 'value', 'url': 'class_Character.html#titlecased', 'doc': '<p>The title case representation of this character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.lowercase', 'type': 'value', 'url': 'class_Character.html#lowercase', 'doc': '<p>Determine if this is a lowercase representation of\nthe character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.uppercase', 'type': 'value', 'url': 'class_Character.html#uppercase', 'doc': '<p>Determine if this is an uppercase representation of\nthe character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.titlecase', 'type': 'value', 'url': 'class_Character.html#titlecase', 'doc': '<p>Determine if this is a title case representation of\nthe character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.digit', 'type': 'value', 'url': 'class_Character.html#digit', 'doc': '<p>Determine if this character is a numeric digit.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.letter', 'type': 'value', 'url': 'class_Character.html#letter', 'doc': '<p>Determine if this character is a letter.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.whitespace', 'type': 'value', 'url': 'class_Character.html#whitespace', 'doc': '<p>Determine if this character is a whitespace\ncharacter.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.control', 'type': 'value', 'url': 'class_Character.html#control', 'doc': '<p>Determine if this character is an ISO control\ncharacter.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character.integer', 'type': 'value', 'url': 'class_Character.html#integer', 'doc': '<p>The code point of the character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Character', 'type': 'class', 'url': 'class_Character.html', 'doc': '<p>A 32-bit Unicode character.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'equalTo', 'type': 'function', 'url': 'index.html#equalTo', 'doc': '<p>Returns a partial function that will compare an element\nto any other element and returns true if they\'re equal.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Null', 'type': 'class', 'url': 'class_Null.html', 'doc': '<p>The type of the <code>null</code> value.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'null', 'type': 'object', 'url': 'object_null.html', 'doc': '<p>The null value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'null', 'type': 'value', 'url': 'index.html#null', 'doc': '<p>The null value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Ordinal.successor', 'type': 'value', 'url': 'interface_Ordinal.html#successor', 'doc': '<p>The successor of this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ordinal.predecessor', 'type': 'value', 'url': 'interface_Ordinal.html#predecessor', 'doc': '<p>The predecessor of this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ordinal', 'type': 'interface', 'url': 'interface_Ordinal.html', 'doc': '<p>Abstraction of ordinal types, that is, types with\nsuccessor and predecessor operations, including\n<code>Integer</code> and other…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Enumerable.integerValue', 'type': 'value', 'url': 'interface_Enumerable.html#integerValue', 'doc': '<p>The corresponding integer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Enumerable', 'type': 'interface', 'url': 'interface_Enumerable.html', 'doc': '<p>Abstraction of ordinal types whose instances can be\nmapped to the integers or to a range of integers.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Numeric.minus', 'type': 'function', 'url': 'interface_Numeric.html#minus', 'doc': '<p>The difference between this number and the given\nnumber.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Numeric.times', 'type': 'function', 'url': 'interface_Numeric.html#times', 'doc': '<p>The product of this number and the given number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Numeric.divided', 'type': 'function', 'url': 'interface_Numeric.html#divided', 'doc': '<p>The quotient obtained by dividing this number by\nthe given number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Numeric', 'type': 'interface', 'url': 'interface_Numeric.html', 'doc': '<p>Abstraction of numeric types supporting addition,\nsubtraction, multiplication, and division, including\n<code>Integer</code> and `…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'forKey', 'type': 'function', 'url': 'index.html#forKey', 'doc': '<p>A function that returns the result of the given <code>resulting()</code> function\non the key of a given <code>Entry</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'shared', 'type': 'function', 'url': 'index.html#shared', 'doc': '<p>Annotation to mark a type or member as shared.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'variable', 'type': 'function', 'url': 'index.html#variable', 'doc': '<p>Annotation to mark an value as variable.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'abstract', 'type': 'function', 'url': 'index.html#abstract', 'doc': '<p>Annotation to mark a class as abstract.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'final', 'type': 'function', 'url': 'index.html#final', 'doc': '<p>Annotation to mark a class as final.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'actual', 'type': 'function', 'url': 'index.html#actual', 'doc': '<p>Annotation to mark a member of a type as refining a\nmember of a supertype.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'formal', 'type': 'function', 'url': 'index.html#formal', 'doc': '<p>Annotation to mark a member whose implementation must\nbe provided by subtypes.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'default', 'type': 'function', 'url': 'index.html#default', 'doc': '<p>Annotation to mark a member whose implementation may be\nrefined by subtypes.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'late', 'type': 'function', 'url': 'index.html#late', 'doc': '<p>Annotation to disable definite initialization analysis\nfor a reference.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'native', 'type': 'function', 'url': 'index.html#native', 'doc': '<p>Annotation to mark a member whose implementation is\nbe provided by platform-native code.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'doc', 'type': 'function', 'url': 'index.html#doc', 'doc': '<p>Annotation to specify API documentation of a program\nelement.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'see', 'type': 'function', 'url': 'index.html#see', 'doc': '<p>Annotation to specify API references to other related\nprogram elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'by', 'type': 'function', 'url': 'index.html#by', 'doc': '<p>Annotation to specify API authors.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'throws', 'type': 'function', 'url': 'index.html#throws', 'doc': '<p>Annotation to mark a program element that throws an\nexception.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'deprecated', 'type': 'function', 'url': 'index.html#deprecated', 'doc': '<p>Annotation to mark program elements which should not be\nused anymore.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'tagged', 'type': 'function', 'url': 'index.html#tagged', 'doc': '<p>Annotation to categorize the API by tag.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'license', 'type': 'function', 'url': 'index.html#license', 'doc': '<p>Annotation to specify the URL of the license of a module\nor package.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'optional', 'type': 'function', 'url': 'index.html#optional', 'doc': '<p>Annotation to specify that a module can be executed\neven if the annotated dependency is not available.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'join', 'type': 'function', 'url': 'index.html#join', 'doc': '<p>Given a list of iterable objects, return a new sequence\nof all elements of the all given objects.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'combine', 'type': 'function', 'url': 'index.html#combine', 'doc': '<p>Applies a function to each element of two <code>Iterable</code>s\nand returns an <code>Iterable</code> with the results.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Finished', 'type': 'class', 'url': 'class_Finished.html', 'doc': '<p>The type of the value that indicates that\nan <code>Iterator</code> is exhausted and has no more\nvalues to return.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'finished.string', 'type': 'attribute', 'url': 'object_finished.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'finished', 'type': 'object', 'url': 'object_finished.html', 'doc': '<p>A value that indicates that an <code>Iterator</code>\nis exhausted and has no more values to\nreturn.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'finished', 'type': 'value', 'url': 'index.html#finished', 'doc': '<p>A value that indicates that an <code>Iterator</code>\nis exhausted and has no more values to\nreturn.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exponentiable.power', 'type': 'function', 'url': 'interface_Exponentiable.html#power', 'doc': '<p>The result of raising this number to the given\npower.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Exponentiable', 'type': 'interface', 'url': 'interface_Exponentiable.html', 'doc': '<p>Abstraction of numeric types that may be raised to a\npower.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'entries', 'type': 'function', 'url': 'index.html#entries', 'doc': '<p>Produces a sequence of each index to element <code>Entry</code>\nfor the given sequence of values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ArraySequence.last', 'type': 'value', 'url': 'class_ArraySequence.html#last', 'doc': '<p>The last element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.first', 'type': 'value', 'url': 'class_ArraySequence.html#first', 'doc': '<p>The first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.size', 'type': 'value', 'url': 'class_ArraySequence.html#size', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.lastIndex', 'type': 'value', 'url': 'class_ArraySequence.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.rest', 'type': 'value', 'url': 'class_ArraySequence.html#rest', 'doc': '<p>Returns an iterable object containing all but the\nfirst element of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.count', 'type': 'function', 'url': 'class_ArraySequence.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.contains', 'type': 'function', 'url': 'class_ArraySequence.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.clone', 'type': 'attribute', 'url': 'class_ArraySequence.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.get', 'type': 'function', 'url': 'class_ArraySequence.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.iterator', 'type': 'function', 'url': 'class_ArraySequence.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.defines', 'type': 'function', 'url': 'class_ArraySequence.html#defines', 'doc': '<p>Determines if there is a value defined for the\ngiven key.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.equals', 'type': 'function', 'url': 'class_ArraySequence.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.hash', 'type': 'attribute', 'url': 'class_ArraySequence.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.reversed', 'type': 'value', 'url': 'class_ArraySequence.html#reversed', 'doc': '<p>Reverse this list, returning a new list.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.span', 'type': 'function', 'url': 'class_ArraySequence.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.spanFrom', 'type': 'function', 'url': 'class_ArraySequence.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.spanTo', 'type': 'function', 'url': 'class_ArraySequence.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.segment', 'type': 'function', 'url': 'class_ArraySequence.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence', 'type': 'class', 'url': 'class_ArraySequence.html', 'doc': '<p>An immutable <code>Sequence</code> implemented using the platform\'s\nnative array type.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'sum', 'type': 'function', 'url': 'index.html#sum', 'doc': '<p>Given a nonempty sequence of <code>Summable</code> values, return\nthe sum of the values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Ranged.span', 'type': 'function', 'url': 'interface_Ranged.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged.spanFrom', 'type': 'function', 'url': 'interface_Ranged.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged.spanTo', 'type': 'function', 'url': 'interface_Ranged.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged.segment', 'type': 'function', 'url': 'interface_Ranged.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged', 'type': 'interface', 'url': 'interface_Ranged.html', 'doc': '<p>Abstract supertype of ranged objects which map a range\nof <code>Comparable</code> keys to ranges of values.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Tuple.first', 'type': 'value', 'url': 'class_Tuple.html#first', 'doc': '<p>The first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.rest', 'type': 'value', 'url': 'class_Tuple.html#rest', 'doc': '<p>Returns an iterable object containing all but the\nfirst element of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Tuple.size', 'type': 'attribute', 'url': 'class_Tuple.html#size', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Tuple.get', 'type': 'function', 'url': 'class_Tuple.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.lastIndex', 'type': 'attribute', 'url': 'class_Tuple.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.last', 'type': 'attribute', 'url': 'class_Tuple.html#last', 'doc': '<p>The last element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.reversed', 'type': 'attribute', 'url': 'class_Tuple.html#reversed', 'doc': '<p>Reverse this list, returning a new list.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.segment', 'type': 'function', 'url': 'class_Tuple.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.span', 'type': 'function', 'url': 'class_Tuple.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.spanTo', 'type': 'function', 'url': 'class_Tuple.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.spanFrom', 'type': 'function', 'url': 'class_Tuple.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.clone', 'type': 'attribute', 'url': 'class_Tuple.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.iterator', 'type': 'function', 'url': 'class_Tuple.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.contains', 'type': 'function', 'url': 'class_Tuple.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple', 'type': 'class', 'url': 'class_Tuple.html', 'doc': '<p>A <em>tuple</em> is a typed linked list.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'LazyList.lastIndex', 'type': 'attribute', 'url': 'class_LazyList.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.get', 'type': 'function', 'url': 'class_LazyList.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.rest', 'type': 'attribute', 'url': 'class_LazyList.html#rest', 'doc': '<p>Returns an iterable object containing all but the\nfirst element of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyList.iterator', 'type': 'function', 'url': 'class_LazyList.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.reversed', 'type': 'attribute', 'url': 'class_LazyList.html#reversed', 'doc': '<p>Returns a <code>List</code> with the elements of this <code>List</code>\nin reverse order.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.clone', 'type': 'attribute', 'url': 'class_LazyList.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.span', 'type': 'function', 'url': 'class_LazyList.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.spanTo', 'type': 'function', 'url': 'class_LazyList.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.spanFrom', 'type': 'function', 'url': 'class_LazyList.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.segment', 'type': 'function', 'url': 'class_LazyList.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.equals', 'type': 'function', 'url': 'class_LazyList.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.hash', 'type': 'attribute', 'url': 'class_LazyList.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.findLast', 'type': 'function', 'url': 'class_LazyList.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyList.first', 'type': 'attribute', 'url': 'class_LazyList.html#first', 'doc': '<p>The first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.last', 'type': 'attribute', 'url': 'class_LazyList.html#last', 'doc': '<p>The last element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList', 'type': 'class', 'url': 'class_LazyList.html', 'doc': '<p>An implementation of List that wraps an <code>Iterable</code> of\nelements.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'print', 'type': 'function', 'url': 'index.html#print', 'doc': '<p>Print a line to the standard output of the virtual\nmachine process, printing the given value\'s <code>string</code>,\nor <code>«null»</code>…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'any', 'type': 'function', 'url': 'index.html#any', 'doc': '<p>Determines if any one of the given boolean values\n(usually a comprehension) is <code>true</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Category.contains', 'type': 'function', 'url': 'interface_Category.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Category.containsEvery', 'type': 'function', 'url': 'interface_Category.html#containsEvery', 'doc': '<p>Determines if every one of the given values belongs\nto this <code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Category.containsAny', 'type': 'function', 'url': 'interface_Category.html#containsAny', 'doc': '<p>Determines if any one of the given values belongs\nto this <code>Category</code></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Category', 'type': 'interface', 'url': 'interface_Category.html', 'doc': '<p>Abstract supertype of objects that contain other\nvalues, called <em>elements</em>, where it is possible to\nefficiently…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Closeable.open', 'type': 'function', 'url': 'interface_Closeable.html#open', 'doc': '<p>Called before entry to a <code>try</code> block.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Closeable.close', 'type': 'function', 'url': 'interface_Closeable.html#close', 'doc': '<p>Called after completion of a <code>try</code> block.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Closeable', 'type': 'interface', 'url': 'interface_Closeable.html', 'doc': '<p>Abstract supertype of types which may appear\nas the expression type of a resource expression\nin a <code>try</code> statement.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'product', 'type': 'function', 'url': 'index.html#product', 'doc': '<p>Given a nonempty sequence of <code>Numeric</code> values, return\nthe product of the values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Singleton.lastIndex', 'type': 'attribute', 'url': 'class_Singleton.html#lastIndex', 'doc': '<p>Returns <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.size', 'type': 'attribute', 'url': 'class_Singleton.html#size', 'doc': '<p>Returns <code>1</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.first', 'type': 'attribute', 'url': 'class_Singleton.html#first', 'doc': '<p>Returns the element contained in this <code>Singleton</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.last', 'type': 'attribute', 'url': 'class_Singleton.html#last', 'doc': '<p>Returns the element contained in this <code>Singleton</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.rest', 'type': 'attribute', 'url': 'class_Singleton.html#rest', 'doc': '<p>Returns <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.get', 'type': 'function', 'url': 'class_Singleton.html#get', 'doc': '<p>Returns the contained element, if the specified\nindex is <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.clone', 'type': 'attribute', 'url': 'class_Singleton.html#clone', 'doc': '<p>Returns a <code>Singleton</code> with the same element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.iterator', 'type': 'function', 'url': 'class_Singleton.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.string', 'type': 'attribute', 'url': 'class_Singleton.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.segment', 'type': 'function', 'url': 'class_Singleton.html#segment', 'doc': '<p>Returns a <code>Singleton</code> if the given starting index\nis <code>0</code> and the given <code>length</code> is greater than <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.span', 'type': 'function', 'url': 'class_Singleton.html#span', 'doc': '<p>Returns a <code>Singleton</code> if the given starting index\nis <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.spanTo', 'type': 'function', 'url': 'class_Singleton.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.spanFrom', 'type': 'function', 'url': 'class_Singleton.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.reversed', 'type': 'attribute', 'url': 'class_Singleton.html#reversed', 'doc': '<p>Return this singleton.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.equals', 'type': 'function', 'url': 'class_Singleton.html#equals', 'doc': '<p>A <code>Singleton</code> can be equal to another <code>List</code> if\nthat <code>List</code> has only one element which is equal to\nthis <code>Singleton</code>\'s…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.hash', 'type': 'attribute', 'url': 'class_Singleton.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.contains', 'type': 'function', 'url': 'class_Singleton.html#contains', 'doc': '<p>Returns <code>true</code> if the specified element is this\n<code>Singleton</code>\'s element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.count', 'type': 'function', 'url': 'class_Singleton.html#count', 'doc': '<p>Returns <code>1</code> if this <code>Singleton</code>\'s element\nsatisfies the predicate, or <code>0</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.map', 'type': 'function', 'url': 'class_Singleton.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.filter', 'type': 'function', 'url': 'class_Singleton.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.fold', 'type': 'function', 'url': 'class_Singleton.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.find', 'type': 'function', 'url': 'class_Singleton.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.findLast', 'type': 'function', 'url': 'class_Singleton.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.sort', 'type': 'function', 'url': 'class_Singleton.html#sort', 'doc': '<p>A sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order upon the…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.any', 'type': 'function', 'url': 'class_Singleton.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.every', 'type': 'function', 'url': 'class_Singleton.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.skipping', 'type': 'function', 'url': 'class_Singleton.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.taking', 'type': 'function', 'url': 'class_Singleton.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.coalesced', 'type': 'attribute', 'url': 'class_Singleton.html#coalesced', 'doc': '<p>Returns the Singleton itself, or empty</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton', 'type': 'class', 'url': 'class_Singleton.html', 'doc': '<p>A sequence with exactly one element, which may be null.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'List.lastIndex', 'type': 'value', 'url': 'interface_List.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'List.size', 'type': 'attribute', 'url': 'interface_List.html#size', 'doc': '<p>The number of elements in this sequence, always\n<code>sequence.lastIndex+1</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.rest', 'type': 'value', 'url': 'interface_List.html#rest', 'doc': '<p>The rest of the list, without the first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'List.defines', 'type': 'function', 'url': 'interface_List.html#defines', 'doc': '<p>Determines if the given index refers to an element\nof this sequence, that is, if\n<code>index&lt;=sequence.lastIndex</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.get', 'type': 'function', 'url': 'interface_List.html#get', 'doc': '<p>Returns the element of this sequence with the given\nindex, or <code>null</code> if the given index is past the end\nof the sequence…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'List.iterator', 'type': 'function', 'url': 'interface_List.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.reversed', 'type': 'value', 'url': 'interface_List.html#reversed', 'doc': '<p>Reverse this list, returning a new list.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'List.equals', 'type': 'function', 'url': 'interface_List.html#equals', 'doc': '<p>Two <code>List</code>s are considered equal iff they have the\nsame <code>size</code> and <em>entry sets</em>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.hash', 'type': 'attribute', 'url': 'interface_List.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.first', 'type': 'attribute', 'url': 'interface_List.html#first', 'doc': '<p>Returns the first element of this <code>List</code>, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.last', 'type': 'attribute', 'url': 'interface_List.html#last', 'doc': '<p>Returns the last element of this <code>List</code>, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.withLeading', 'type': 'function', 'url': 'interface_List.html#withLeading', 'doc': '<p>Returns a new <code>List</code> that starts with the specified\nelement, followed by the elements of this <code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.withTrailing', 'type': 'function', 'url': 'interface_List.html#withTrailing', 'doc': '<p>Returns a new <code>List</code> that contains the specified\nelement appended to the end of the elements of this\n<code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List', 'type': 'interface', 'url': 'interface_List.html', 'doc': '<p>Represents a collection in which every element has a\nunique non-negative integer index.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'sort', 'type': 'function', 'url': 'index.html#sort', 'doc': '<p>Sort the given elements, returning a new sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Binary.not', 'type': 'value', 'url': 'interface_Binary.html#not', 'doc': '<p>The binary complement of this sequence of bits.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.size', 'type': 'value', 'url': 'interface_Binary.html#size', 'doc': '<p>The number of bits (0 or 1) that this sequence of bits can hold.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.leftLogicalShift', 'type': 'function', 'url': 'interface_Binary.html#leftLogicalShift', 'doc': '<p>Performs a left logical shift.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.rightLogicalShift', 'type': 'function', 'url': 'interface_Binary.html#rightLogicalShift', 'doc': '<p>Performs a right logical shift.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.rightArithmeticShift', 'type': 'function', 'url': 'interface_Binary.html#rightArithmeticShift', 'doc': '<p>Performs a right arithmetic shift.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.and', 'type': 'function', 'url': 'interface_Binary.html#and', 'doc': '<p>Performs a logical AND operation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.or', 'type': 'function', 'url': 'interface_Binary.html#or', 'doc': '<p>Performs a logical inclusive OR operation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.xor', 'type': 'function', 'url': 'interface_Binary.html#xor', 'doc': '<p>Performs a logical exclusive OR operation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.get', 'type': 'function', 'url': 'interface_Binary.html#get', 'doc': '<p>Retrieves a given bit from this bit sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.set', 'type': 'function', 'url': 'interface_Binary.html#set', 'doc': '<p>Returns a new number with the given bit set to the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.clear', 'type': 'function', 'url': 'interface_Binary.html#clear', 'doc': '<p>Returns a new number with the given bit set to 0.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Binary.flip', 'type': 'function', 'url': 'interface_Binary.html#flip', 'doc': '<p>Returns a new number with the given bit flipped to its opposite value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary', 'type': 'interface', 'url': 'interface_Binary.html', 'doc': '<p>Abstraction of numeric types that consist in\na sequence of bits, like <code>Integer</code>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'identityHash', 'type': 'function', 'url': 'index.html#identityHash', 'doc': '<p>Return the system-defined identity hash value of the\ngiven value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.iterator', 'type': 'function', 'url': 'interface_Iterable.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Iterable.empty', 'type': 'attribute', 'url': 'interface_Iterable.html#empty', 'doc': '<p>Determines if the iterable object is empty, that is\nto say, if the iterator returns no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Iterable.size', 'type': 'attribute', 'url': 'interface_Iterable.html#size', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.contains', 'type': 'function', 'url': 'interface_Iterable.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Iterable.first', 'type': 'attribute', 'url': 'interface_Iterable.html#first', 'doc': '<p>The first element returned by the iterator, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Iterable.last', 'type': 'attribute', 'url': 'interface_Iterable.html#last', 'doc': '<p>The last element returned by the iterator, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Iterable.rest', 'type': 'attribute', 'url': 'interface_Iterable.html#rest', 'doc': '<p>Returns an iterable object containing all but the\nfirst element of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.sequence', 'type': 'attribute', 'url': 'interface_Iterable.html#sequence', 'doc': '<p>A sequence containing the elements returned by the\niterator.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.map', 'type': 'function', 'url': 'interface_Iterable.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.filter', 'type': 'function', 'url': 'interface_Iterable.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.fold', 'type': 'function', 'url': 'interface_Iterable.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.find', 'type': 'function', 'url': 'interface_Iterable.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.findLast', 'type': 'function', 'url': 'interface_Iterable.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.sort', 'type': 'function', 'url': 'interface_Iterable.html#sort', 'doc': '<p>A sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order upon the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.collect', 'type': 'function', 'url': 'interface_Iterable.html#collect', 'doc': '<p>A sequence containing the results of applying the\ngiven mapping to the elements of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.select', 'type': 'function', 'url': 'interface_Iterable.html#select', 'doc': '<p>A sequence containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.any', 'type': 'function', 'url': 'interface_Iterable.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.every', 'type': 'function', 'url': 'interface_Iterable.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.skipping', 'type': 'function', 'url': 'interface_Iterable.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.taking', 'type': 'function', 'url': 'interface_Iterable.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.by', 'type': 'function', 'url': 'interface_Iterable.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.count', 'type': 'function', 'url': 'interface_Iterable.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.coalesced', 'type': 'attribute', 'url': 'interface_Iterable.html#coalesced', 'doc': '<p>The non-null elements of this <code>Iterable</code>, in their\noriginal order.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.indexed', 'type': 'attribute', 'url': 'interface_Iterable.html#indexed', 'doc': '<p>All entries of form <code>index-&gt;element</code> where <code>index</code>\nis the position at which <code>element</code> occurs, for every\nnon-null…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.following', 'type': 'function', 'url': 'interface_Iterable.html#following', 'doc': '<p>An <code>Iterable</code> with the given inital element followed\nby the elements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.chain', 'type': 'function', 'url': 'interface_Iterable.html#chain', 'doc': '<p>The elements of this iterable object, in their\noriginal order, followed by the elements of the\ngiven iterable object…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.defaultNullElements', 'type': 'function', 'url': 'interface_Iterable.html#defaultNullElements', 'doc': '<p>An <code>Iterable</code> that produces the elements of this\niterable object, replacing every <code>null</code> element\nwith the given…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.string', 'type': 'attribute', 'url': 'interface_Iterable.html#string', 'doc': '<p>A string of form <code>"{ x, y, z }"</code> where <code>x</code>, <code>y</code>,\nand <code>z</code> are the <code>string</code> representations of the\nelements of this…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Iterable', 'type': 'interface', 'url': 'interface_Iterable.html', 'doc': '<p>Abstract supertype of containers whose elements may be\niterated.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Anything', 'type': 'class', 'url': 'class_Anything.html', 'doc': '<p>The abstract supertype of all types.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'min', 'type': 'function', 'url': 'index.html#min', 'doc': '<p>Given a nonempty sequence of <code>Comparable</code> values,\nreturn the smallest value in the sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Map.equals', 'type': 'function', 'url': 'interface_Map.html#equals', 'doc': '<p>Two <code>Map</code>s are considered equal iff they have the\nsame <em>entry sets</em>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Map.hash', 'type': 'attribute', 'url': 'interface_Map.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Map.keys', 'type': 'attribute', 'url': 'interface_Map.html#keys', 'doc': '<p>Returns the set of keys contained in this <code>Map</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Map.values', 'type': 'attribute', 'url': 'interface_Map.html#values', 'doc': '<p>Returns all the values stored in this <code>Map</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Map.inverse', 'type': 'attribute', 'url': 'interface_Map.html#inverse', 'doc': '<p>Returns a <code>Map</code> in which every key is an <code>Item</code> in\nthis map, and every value is the set of keys that\nstored the `Item…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Map.mapItems', 'type': 'function', 'url': 'interface_Map.html#mapItems', 'doc': '<p>Returns a <code>Map</code> with the same keys as this map.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Map', 'type': 'interface', 'url': 'interface_Map.html', 'doc': '<p>Represents a collection which maps <em>keys</em> to <em>items</em>,\nwhere a key can map to at most one item.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'LazySet.clone', 'type': 'attribute', 'url': 'class_LazySet.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.size', 'type': 'attribute', 'url': 'class_LazySet.html#size', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazySet.iterator', 'type': 'function', 'url': 'class_LazySet.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.union', 'type': 'function', 'url': 'class_LazySet.html#union', 'doc': '<p>Returns a new <code>Set</code> containing all the elements of\nthis <code>Set</code> and all the elements of the given <code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.intersection', 'type': 'function', 'url': 'class_LazySet.html#intersection', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\nthat are present in both this <code>Set</code> and the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.exclusiveUnion', 'type': 'function', 'url': 'class_LazySet.html#exclusiveUnion', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\ncontained in either this <code>Set</code> or the given <code>Set</code>,\nbut no element…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.complement', 'type': 'function', 'url': 'class_LazySet.html#complement', 'doc': '<p>Returns a new <code>Set</code> containing all the elements in\nthis <code>Set</code> that are not contained in the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.equals', 'type': 'function', 'url': 'class_LazySet.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.hash', 'type': 'attribute', 'url': 'class_LazySet.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet', 'type': 'class', 'url': 'class_LazySet.html', 'doc': '<p>An implementation of Set that wraps an <code>Iterable</code> of\nelements.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'SequenceBuilder.sequence', 'type': 'value', 'url': 'class_SequenceBuilder.html#sequence', 'doc': '<p>The resulting sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.append', 'type': 'function', 'url': 'class_SequenceBuilder.html#append', 'doc': '<p>Append an element to the sequence and return this\n<code>SequenceBuilder</code></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.appendAll', 'type': 'function', 'url': 'class_SequenceBuilder.html#appendAll', 'doc': '<p>Append multiple elements to the sequence and return\nthis <code>SequenceBuilder</code></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.size', 'type': 'attribute', 'url': 'class_SequenceBuilder.html#size', 'doc': '<p>The size of the resulting sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.empty', 'type': 'attribute', 'url': 'class_SequenceBuilder.html#empty', 'doc': '<p>Determine if the resulting sequence is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder', 'type': 'class', 'url': 'class_SequenceBuilder.html', 'doc': '<p>Since sequences are immutable, this class is used for\nconstructing a new sequence by incrementally appending\nelements…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'SequenceAppender.sequence', 'type': 'value', 'url': 'class_SequenceAppender.html#sequence', 'doc': '<p>The resulting nonempty sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'SequenceAppender', 'type': 'class', 'url': 'class_SequenceAppender.html', 'doc': '<p>This class is used for constructing a new nonempty\nsequence by incrementally appending elements to an\nexisting…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'byKey', 'type': 'function', 'url': 'index.html#byKey', 'doc': '<p>A comparator for <code>Entry</code>s which compares their keys\naccording to the given <code>comparing()</code> function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'count', 'type': 'function', 'url': 'index.html#count', 'doc': '<p>A count of the number of <code>true</code> items in the given values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'greaterThan', 'type': 'function', 'url': 'index.html#greaterThan', 'doc': '<p>Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Identifiable.equals', 'type': 'function', 'url': 'interface_Identifiable.html#equals', 'doc': '<p>Identity equality comparing the identity of the two\nvalues.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Identifiable.hash', 'type': 'attribute', 'url': 'interface_Identifiable.html#hash', 'doc': '<p>The system-defined identity hash value of the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Identifiable', 'type': 'interface', 'url': 'interface_Identifiable.html', 'doc': '<p>The abstract supertype of all types with a well-defined\nnotion of identity.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Comparable.compare', 'type': 'function', 'url': 'interface_Comparable.html#compare', 'doc': '<p>Compares this value with the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Comparable', 'type': 'interface', 'url': 'interface_Comparable.html', 'doc': '<p>The general contract for values whose magnitude can be\ncompared.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'className', 'type': 'function', 'url': 'index.html#className', 'doc': '<p>Return the name of the concrete class of the given\nobject.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Container.empty', 'type': 'value', 'url': 'interface_Container.html#empty', 'doc': '<p>Determine if the container is empty, that is, if\nit has no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Container.first', 'type': 'value', 'url': 'interface_Container.html#first', 'doc': '<p>The first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Container.last', 'type': 'value', 'url': 'interface_Container.html#last', 'doc': '<p>The last element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Container', 'type': 'interface', 'url': 'interface_Container.html', 'doc': '<p>Abstract supertype of objects which may or may not\ncontain one of more other values, called <em>elements</em>,\nand provide an…</p>\n', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-interface']},
{'name': 'EmptyContainer', 'type': 'interface', 'url': 'interface_EmptyContainer.html', 'doc': '<p>An empty container.</p>\n', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-interface']},
{'name': 'NonemptyContainer', 'type': 'interface', 'url': 'interface_NonemptyContainer.html', 'doc': '<p>A nonempty container.</p>\n', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-interface']},
{'name': 'NegativeNumberException', 'type': 'class', 'url': 'class_NegativeNumberException.html', 'doc': '<p>Thrown when a negative number is not allowed.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'nothing', 'type': 'attribute', 'url': 'index.html#nothing', 'doc': '<p>A value that is assignable to any type, but that\nresults in an exception when evaluated.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'identical', 'type': 'function', 'url': 'index.html#identical', 'doc': '<p>Determine if the arguments are identical.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'flatten', 'type': 'function', 'url': 'index.html#flatten', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'unflatten', 'type': 'function', 'url': 'index.html#unflatten', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'byDecreasing', 'type': 'function', 'url': 'index.html#byDecreasing', 'doc': '<p>A comparator which orders elements in decreasing order\naccording to the <code>Comparable</code> returned by the given\n`…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'largest', 'type': 'function', 'url': 'index.html#largest', 'doc': '<p>Given two <code>Comparable</code> values, return largest of the\ntwo.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Invertable.negativeValue', 'type': 'value', 'url': 'interface_Invertable.html#negativeValue', 'doc': '<p>The additive inverse of the value, which may be expressed\nas an instance of a wider type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Invertable.positiveValue', 'type': 'value', 'url': 'interface_Invertable.html#positiveValue', 'doc': '<p>The value itself, expressed as an instance of the\nwider type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Invertable', 'type': 'interface', 'url': 'interface_Invertable.html', 'doc': '<p>Abstraction of types which support a unary additive inversion\noperation.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'byItem', 'type': 'function', 'url': 'index.html#byItem', 'doc': '<p>A comparator for <code>Entry</code>s which compares their items\naccording to the given <code>comparing()</code> function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'infinity', 'type': 'value', 'url': 'index.html#infinity', 'doc': '<p>An instance of <code>Float</code> representing positive infinity\n∞.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.undefined', 'type': 'attribute', 'url': 'class_Float.html#undefined', 'doc': '<p>Determines whether this value is undefined (that is,\nNot a Number or NaN).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.infinite', 'type': 'attribute', 'url': 'class_Float.html#infinite', 'doc': '<p>Determines whether this value is infinite in\nmagnitude.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.finite', 'type': 'attribute', 'url': 'class_Float.html#finite', 'doc': '<p>Determines whether this value is finite.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.sign', 'type': 'value', 'url': 'class_Float.html#sign', 'doc': '<p>The sign of this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Float.positive', 'type': 'value', 'url': 'class_Float.html#positive', 'doc': '<p>Determines if this value is a positive number or\n<code>infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Float.negative', 'type': 'value', 'url': 'class_Float.html#negative', 'doc': '<p>Determines if this value is a negative number or\n<code>-infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Float.strictlyPositive', 'type': 'value', 'url': 'class_Float.html#strictlyPositive', 'doc': '<p>Determines if this value is a positive number, <code>+0</code>,\nor <code>infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Float.strictlyNegative', 'type': 'value', 'url': 'class_Float.html#strictlyNegative', 'doc': '<p>Determines if this value is a negative number, <code>-0</code>,\nor <code>-infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Float', 'type': 'class', 'url': 'class_Float.html', 'doc': '<p>An IEEE 754 64-bit [floating point number][].</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'parseFloat', 'type': 'function', 'url': 'index.html#parseFloat', 'doc': '<p>The <code>Float</code> value of the given string representation of\na decimal number or <code>null</code> if the string does not\nrepresent a…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'first', 'type': 'function', 'url': 'index.html#first', 'doc': '<p>The first of the given elements (usually a comprehension),\nif any.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.string', 'type': 'value', 'url': 'class_StringBuilder.html#string', 'doc': '<p>The resulting string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'StringBuilder.append', 'type': 'function', 'url': 'class_StringBuilder.html#append', 'doc': '<p>Append the characters in the given string.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendAll', 'type': 'function', 'url': 'class_StringBuilder.html#appendAll', 'doc': '<p>Append the characters in the given strings.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendCharacter', 'type': 'function', 'url': 'class_StringBuilder.html#appendCharacter', 'doc': '<p>Append the given character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendNewline', 'type': 'function', 'url': 'class_StringBuilder.html#appendNewline', 'doc': '<p>Append a newline character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendSpace', 'type': 'function', 'url': 'class_StringBuilder.html#appendSpace', 'doc': '<p>Append a space character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.reset', 'type': 'function', 'url': 'class_StringBuilder.html#reset', 'doc': '<p>Remove all content and return to initial state.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.insert', 'type': 'function', 'url': 'class_StringBuilder.html#insert', 'doc': '<p>Insert a <code>String</code> at the specified position.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.insertCharacter', 'type': 'function', 'url': 'class_StringBuilder.html#insertCharacter', 'doc': '<p>Insert a <code>Character</code> at the specified position.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.delete', 'type': 'function', 'url': 'class_StringBuilder.html#delete', 'doc': '<p>Deletes the specified number of characters from the\ncurrent content, starting at the specified position.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.size', 'type': 'value', 'url': 'class_StringBuilder.html#size', 'doc': '<p>Returns the size of the current content.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder', 'type': 'class', 'url': 'class_StringBuilder.html', 'doc': '<p>Since strings are immutable, this class is used for\nconstructing a string by incrementally appending\ncharacters to the…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Cloneable.clone', 'type': 'value', 'url': 'interface_Cloneable.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Cloneable', 'type': 'interface', 'url': 'interface_Cloneable.html', 'doc': '<p>Abstract supertype of objects whose value can be\ncloned.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'OverflowException', 'type': 'class', 'url': 'class_OverflowException.html', 'doc': '<p>Thrown when a mathematical operation caused a number to overflow from its bounds.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Iterator.next', 'type': 'function', 'url': 'interface_Iterator.html#next', 'doc': '<p>The next element, or <code>finished</code> if there are no\nmore elements to be iterated.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Iterator', 'type': 'interface', 'url': 'interface_Iterator.html', 'doc': '<p>Produces elements of an <code>Iterable</code> object.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'every', 'type': 'function', 'url': 'index.html#every', 'doc': '<p>Determines if every one of the given boolean values\n(usually a comprehension) is <code>true</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'curry', 'type': 'function', 'url': 'index.html#curry', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'uncurry', 'type': 'function', 'url': 'index.html#uncurry', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'compose', 'type': 'function', 'url': 'index.html#compose', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Scalar.magnitude', 'type': 'value', 'url': 'interface_Scalar.html#magnitude', 'doc': '<p>The magnitude of this number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Scalar.fractionalPart', 'type': 'value', 'url': 'interface_Scalar.html#fractionalPart', 'doc': '<p>The fractional part of the number, after truncation\nof the integral part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Scalar.wholePart', 'type': 'value', 'url': 'interface_Scalar.html#wholePart', 'doc': '<p>The integral value of the number after truncation\nof the fractional part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Scalar', 'type': 'interface', 'url': 'interface_Scalar.html', 'doc': '<p>Abstraction of numeric types representing scalar\nvalues, including <code>Integer</code> and <code>Float</code>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Callable', 'type': 'interface', 'url': 'interface_Callable.html', 'doc': '<p>A reference to a function.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Set.superset', 'type': 'function', 'url': 'interface_Set.html#superset', 'doc': '<p>Determines if this <code>Set</code> is a superset of the\nspecified Set, that is, if this <code>Set</code> contains all\nof the elements in…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Set.subset', 'type': 'function', 'url': 'interface_Set.html#subset', 'doc': '<p>Determines if this <code>Set</code> is a subset of the given\n<code>Set</code>, that is, if the given set contains all of\nthe elements in…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Set.equals', 'type': 'function', 'url': 'interface_Set.html#equals', 'doc': '<p>Two <code>Set</code>s are considered equal if they have the\nsame size and if every element of the first set is\nalso an element of…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Set.hash', 'type': 'attribute', 'url': 'interface_Set.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Set.union', 'type': 'function', 'url': 'interface_Set.html#union', 'doc': '<p>Returns a new <code>Set</code> containing all the elements of\nthis <code>Set</code> and all the elements of the given <code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set.intersection', 'type': 'function', 'url': 'interface_Set.html#intersection', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\nthat are present in both this <code>Set</code> and the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set.exclusiveUnion', 'type': 'function', 'url': 'interface_Set.html#exclusiveUnion', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\ncontained in either this <code>Set</code> or the given <code>Set</code>,\nbut no element…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set.complement', 'type': 'function', 'url': 'interface_Set.html#complement', 'doc': '<p>Returns a new <code>Set</code> containing all the elements in\nthis <code>Set</code> that are not contained in the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set', 'type': 'interface', 'url': 'interface_Set.html', 'doc': '<p>A collection of unique elements.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Array.set', 'type': 'function', 'url': 'class_Array.html#set', 'doc': '<p>Replace the existing element at the specified index\nwith the given element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Array.reversed', 'type': 'value', 'url': 'class_Array.html#reversed', 'doc': '<p>Reverse this array, returning a new array.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Array.rest', 'type': 'value', 'url': 'class_Array.html#rest', 'doc': '<p>The rest of the array, without the first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Array.copyTo', 'type': 'function', 'url': 'class_Array.html#copyTo', 'doc': '<p>Efficiently copy the elements in the segment\n<code>sourcePosition:length</code> of this array to the segment\n`…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Array', 'type': 'class', 'url': 'class_Array.html', 'doc': '<p>A fixed-size array of elements.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'array', 'type': 'function', 'url': 'index.html#array', 'doc': '<p>Create an array containing the given elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'arrayOfSize', 'type': 'function', 'url': 'index.html#arrayOfSize', 'doc': '<p>Create an array of the specified size, populating every\nindex with the given element.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Summable.plus', 'type': 'function', 'url': 'interface_Summable.html#plus', 'doc': '<p>The result of adding the given value to this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Summable', 'type': 'interface', 'url': 'interface_Summable.html', 'doc': '<p>Abstraction of types which support a binary addition\noperator.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'AssertionException', 'type': 'class', 'url': 'class_AssertionException.html', 'doc': '<p>An exception that occurs when an assertion fails, that\nis, when a condition in an <code>assert</code> statement evaluates\nto false…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Sequential.reversed', 'type': 'value', 'url': 'interface_Sequential.html#reversed', 'doc': '<p>Reverse this sequence, returning a new sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequential.sequence', 'type': 'attribute', 'url': 'interface_Sequential.html#sequence', 'doc': '<p>This sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.rest', 'type': 'value', 'url': 'interface_Sequential.html#rest', 'doc': '<p>The rest of the sequence, without the first\nelement.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Sequential.clone', 'type': 'attribute', 'url': 'interface_Sequential.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Sequential.string', 'type': 'attribute', 'url': 'interface_Sequential.html#string', 'doc': '<p>A string of form <code>"[ x, y, z ]"</code> where <code>x</code>, <code>y</code>,\nand <code>z</code> are the <code>string</code> representations of the\nelements of this…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential', 'type': 'interface', 'url': 'interface_Sequential.html', 'doc': '<p>A possibly-empty, immutable sequence of values.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'InitializationException', 'type': 'class', 'url': 'class_InitializationException.html', 'doc': '<p>Thrown when a problem was detected with value initialization.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'LazyMap.first', 'type': 'attribute', 'url': 'class_LazyMap.html#first', 'doc': '<p>The first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.last', 'type': 'attribute', 'url': 'class_LazyMap.html#last', 'doc': '<p>The last element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.clone', 'type': 'attribute', 'url': 'class_LazyMap.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.size', 'type': 'attribute', 'url': 'class_LazyMap.html#size', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyMap.get', 'type': 'function', 'url': 'class_LazyMap.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.iterator', 'type': 'function', 'url': 'class_LazyMap.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.equals', 'type': 'function', 'url': 'class_LazyMap.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.hash', 'type': 'attribute', 'url': 'class_LazyMap.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap', 'type': 'class', 'url': 'class_LazyMap.html', 'doc': '<p>A Map implementation that wraps an <code>Iterable</code> of\nentries.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'shuffle', 'type': 'function', 'url': 'index.html#shuffle', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Empty.iterator', 'type': 'function', 'url': 'interface_Empty.html#iterator', 'doc': '<p>Returns an iterator that is already exhausted.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.get', 'type': 'function', 'url': 'interface_Empty.html#get', 'doc': '<p>Returns <code>null</code> for any given index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.segment', 'type': 'function', 'url': 'interface_Empty.html#segment', 'doc': '<p>Returns an <code>Empty</code> for any given segment.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.span', 'type': 'function', 'url': 'interface_Empty.html#span', 'doc': '<p>Returns an <code>Empty</code> for any given span.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.spanTo', 'type': 'function', 'url': 'interface_Empty.html#spanTo', 'doc': '<p>Returns an <code>Empty</code> for any given span.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.spanFrom', 'type': 'function', 'url': 'interface_Empty.html#spanFrom', 'doc': '<p>Returns an <code>Empty</code> for any given span.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.empty', 'type': 'attribute', 'url': 'interface_Empty.html#empty', 'doc': '<p>Returns <code>true</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.size', 'type': 'attribute', 'url': 'interface_Empty.html#size', 'doc': '<p>Returns 0.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.reversed', 'type': 'attribute', 'url': 'interface_Empty.html#reversed', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.sequence', 'type': 'attribute', 'url': 'interface_Empty.html#sequence', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.string', 'type': 'attribute', 'url': 'interface_Empty.html#string', 'doc': '<p>Returns a string description of the empty sequence:\n<code>{}</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.lastIndex', 'type': 'attribute', 'url': 'interface_Empty.html#lastIndex', 'doc': '<p>Returns <code>null</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.first', 'type': 'attribute', 'url': 'interface_Empty.html#first', 'doc': '<p>Returns <code>null</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.last', 'type': 'attribute', 'url': 'interface_Empty.html#last', 'doc': '<p>Returns <code>null</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.rest', 'type': 'attribute', 'url': 'interface_Empty.html#rest', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.clone', 'type': 'attribute', 'url': 'interface_Empty.html#clone', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.coalesced', 'type': 'attribute', 'url': 'interface_Empty.html#coalesced', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.indexed', 'type': 'attribute', 'url': 'interface_Empty.html#indexed', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.chain', 'type': 'function', 'url': 'interface_Empty.html#chain', 'doc': '<p>Returns <code>other</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.contains', 'type': 'function', 'url': 'interface_Empty.html#contains', 'doc': '<p>Returns <code>false</code> for any given element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.count', 'type': 'function', 'url': 'interface_Empty.html#count', 'doc': '<p>Returns 0 for any given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.defines', 'type': 'function', 'url': 'interface_Empty.html#defines', 'doc': '<p>Determines if there is a value defined for the\ngiven key.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.map', 'type': 'function', 'url': 'interface_Empty.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.filter', 'type': 'function', 'url': 'interface_Empty.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.fold', 'type': 'function', 'url': 'interface_Empty.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.find', 'type': 'function', 'url': 'interface_Empty.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.sort', 'type': 'function', 'url': 'interface_Empty.html#sort', 'doc': '<p>A sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order upon the…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.collect', 'type': 'function', 'url': 'interface_Empty.html#collect', 'doc': '<p>A sequence containing the results of applying the\ngiven mapping to the elements of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.select', 'type': 'function', 'url': 'interface_Empty.html#select', 'doc': '<p>A sequence containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.any', 'type': 'function', 'url': 'interface_Empty.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.every', 'type': 'function', 'url': 'interface_Empty.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.skipping', 'type': 'function', 'url': 'interface_Empty.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.taking', 'type': 'function', 'url': 'interface_Empty.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.by', 'type': 'function', 'url': 'interface_Empty.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.withLeading', 'type': 'function', 'url': 'interface_Empty.html#withLeading', 'doc': '<p>Returns a new <code>List</code> that starts with the specified\nelement, followed by the elements of this <code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.withTrailing', 'type': 'function', 'url': 'interface_Empty.html#withTrailing', 'doc': '<p>Returns a new <code>List</code> that contains the specified\nelement appended to the end of the elements of this\n<code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.following', 'type': 'function', 'url': 'interface_Empty.html#following', 'doc': '<p>An <code>Iterable</code> with the given inital element followed\nby the elements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty', 'type': 'interface', 'url': 'interface_Empty.html', 'doc': '<p>A sequence with no elements.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'empty', 'type': 'object', 'url': 'object_empty.html', 'doc': '<p>A sequence with no elements, abbreviated <code>[]</code>.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'empty', 'type': 'value', 'url': 'index.html#empty', 'doc': '<p>A sequence with no elements, abbreviated <code>[]</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'emptyIterator.next', 'type': 'function', 'url': 'object_emptyIterator.html#next', 'doc': '<p>The next element, or <code>finished</code> if there are no\nmore elements to be iterated.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptyIterator', 'type': 'object', 'url': 'object_emptyIterator.html', 'doc': '<p>An iterator that returns no elements.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'emptyIterator', 'type': 'value', 'url': 'index.html#emptyIterator', 'doc': '<p>An iterator that returns no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'emptyOrSingleton', 'type': 'function', 'url': 'index.html#emptyOrSingleton', 'doc': '<p>A <code>Singleton</code> if the given element is non-null, otherwise <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Number.positive', 'type': 'value', 'url': 'interface_Number.html#positive', 'doc': '<p>Determine if the number is positive.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.negative', 'type': 'value', 'url': 'interface_Number.html#negative', 'doc': '<p>Determine if the number is negative.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.float', 'type': 'value', 'url': 'interface_Number.html#float', 'doc': '<p>The number, represented as a <code>Float</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.integer', 'type': 'value', 'url': 'interface_Number.html#integer', 'doc': '<p>The number, represented as an <code>Integer</code>, after\ntruncation of any fractional part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.magnitude', 'type': 'value', 'url': 'interface_Number.html#magnitude', 'doc': '<p>The magnitude of the number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.sign', 'type': 'value', 'url': 'interface_Number.html#sign', 'doc': '<p>The sign of this number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.fractionalPart', 'type': 'value', 'url': 'interface_Number.html#fractionalPart', 'doc': '<p>The fractional part of the number, after truncation\nof the integral part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.wholePart', 'type': 'value', 'url': 'interface_Number.html#wholePart', 'doc': '<p>The integral value of the number after truncation\nof the fractional part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number', 'type': 'interface', 'url': 'interface_Number.html', 'doc': '<p>Abstraction of numbers.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ceylon.language.metamodel', 'type': 'package', 'url': 'metamodel/index.html', 'doc': '', 'tags': [],'icons': ['icon-package', 'icon-decoration-local']},
{'name': 'ConstrainedAnnotation.occurs', 'type': 'function', 'url': 'metamodel/interface_ConstrainedAnnotation.html#occurs', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstrainedAnnotation', 'type': 'interface', 'url': 'metamodel/interface_ConstrainedAnnotation.html', 'doc': '<p>An annotation.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'annotations', 'type': 'function', 'url': 'metamodel/index.html#annotations', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'optionalAnnotation', 'type': 'function', 'url': 'metamodel/index.html#optionalAnnotation', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'sequencedAnnotations', 'type': 'function', 'url': 'metamodel/index.html#sequencedAnnotations', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'OptionalAnnotation', 'type': 'interface', 'url': 'metamodel/interface_OptionalAnnotation.html', 'doc': '<p>An annotation that may occur at most once\nat a single program element.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Annotated', 'type': 'interface', 'url': 'metamodel/interface_Annotated.html', 'doc': '<p>A program element that can\nbe annotated.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Annotation', 'type': 'interface', 'url': 'metamodel/interface_Annotation.html', 'doc': '<p>An annotation.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'SequencedAnnotation', 'type': 'interface', 'url': 'metamodel/interface_SequencedAnnotation.html', 'doc': '<p>An annotation that may occur multiple times\nat a single program element.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Type', 'type': 'interface', 'url': 'metamodel/interface_Type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'ceylon.language', 'type': 'module', 'url': 'index.html', 'doc': '<p>The Ceylon language module containing the core types\nreferred to in the language specification.</p>\n', 'tags': [],'icons': []}];
var tagIndex = [
];
