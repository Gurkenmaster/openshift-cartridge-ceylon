var index = [
{'name': 'ceylon.language', 'type': 'package', 'url': 'index.html#section-package', 'doc': '<p>The Ceylon language package.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'Numeric.minus', 'type': 'function', 'url': 'Numeric.type.html#minus', 'doc': '<p>The difference between this number and the given\nnumber.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Numeric.times', 'type': 'function', 'url': 'Numeric.type.html#times', 'doc': '<p>The product of this number and the given number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Numeric.divided', 'type': 'function', 'url': 'Numeric.type.html#divided', 'doc': '<p>The quotient obtained by dividing this number by\nthe given number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Numeric', 'type': 'interface', 'url': 'Numeric.type.html', 'doc': '<p>Abstraction of numeric types with addition,\n<code>x + y</code>, subtraction, <code>x - y</code>, multiplication,\n<code>x * y</code>, and division, `x…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'process.arguments', 'type': 'value', 'url': 'process.object.html#arguments', 'doc': '<p>The command line arguments to the virtual machine.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.namedArgumentPresent', 'type': 'function', 'url': 'process.object.html#namedArgumentPresent', 'doc': '<p>Determine if an argument of form <code>-name</code> or <code>--name</code>\nwas specified among the command line arguments to\nthe virtual…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.namedArgumentValue', 'type': 'function', 'url': 'process.object.html#namedArgumentValue', 'doc': '<p>The value of the first argument of form <code>-name=value</code>,\n<code>--name=value</code>, or <code>-name value</code> specified among the\ncommand…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.propertyValue', 'type': 'function', 'url': 'process.object.html#propertyValue', 'doc': '<p>The value of the given system property of the virtual\nmachine, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.write', 'type': 'function', 'url': 'process.object.html#write', 'doc': '<p>Print a string to the standard output of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.writeLine', 'type': 'function', 'url': 'process.object.html#writeLine', 'doc': '<p>Print a line to the standard output of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.flush', 'type': 'function', 'url': 'process.object.html#flush', 'doc': '<p>Flush the standard output of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.writeError', 'type': 'function', 'url': 'process.object.html#writeError', 'doc': '<p>Print a string to the standard error of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.writeErrorLine', 'type': 'function', 'url': 'process.object.html#writeErrorLine', 'doc': '<p>Print a line to the standard error of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.flushError', 'type': 'function', 'url': 'process.object.html#flushError', 'doc': '<p>Flush the standard error of the\nvirtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.readLine', 'type': 'function', 'url': 'process.object.html#readLine', 'doc': '<p>Read a line of input text from the standard input\nof the virtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.exit', 'type': 'function', 'url': 'process.object.html#exit', 'doc': '<p>Force the virtual machine to terminate with\nthe given exit code.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'process.string', 'type': 'value', 'url': 'process.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'process', 'type': 'object', 'url': 'process.object.html', 'doc': '<p>Represents the current process (instance of the virtual\nmachine).</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'process', 'type': 'value', 'url': 'index.html#process', 'doc': '<p>Represents the current process (instance of the virtual\nmachine).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'parseInteger', 'type': 'function', 'url': 'index.html#parseInteger', 'doc': '<p>The <code>Integer</code> value of the given string representation\nof an integer, or <code>null</code> if the string does not represent\nan…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'formatInteger', 'type': 'function', 'url': 'index.html#formatInteger', 'doc': '<p>The string representation of <code>integer</code> in the <code>radix</code> base.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'emptyOrSingleton', 'type': 'function', 'url': 'index.html#emptyOrSingleton', 'doc': '<p>A <code>Singleton</code> if the given element is non-null, otherwise <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Annotated', 'type': 'interface', 'url': 'Annotated.type.html', 'doc': '<p>A program element that can\nbe annotated.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'InitializationException', 'type': 'class', 'url': 'InitializationException.type.html', 'doc': '<p>Thrown when a problem was detected with value initialization.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'LazySet.clone', 'type': 'attribute', 'url': 'LazySet.type.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.size', 'type': 'attribute', 'url': 'LazySet.type.html#size', 'doc': '<p>The number of elements returned by the iterator of\nthis iterable object, if the iterator terminates.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazySet.iterator', 'type': 'function', 'url': 'LazySet.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.union', 'type': 'function', 'url': 'LazySet.type.html#union', 'doc': '<p>Returns a new <code>Set</code> containing all the elements of\nthis <code>Set</code> and all the elements of the given <code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.intersection', 'type': 'function', 'url': 'LazySet.type.html#intersection', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\nthat are present in both this <code>Set</code> and the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.exclusiveUnion', 'type': 'function', 'url': 'LazySet.type.html#exclusiveUnion', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\ncontained in either this <code>Set</code> or the given <code>Set</code>,\nbut no element…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.complement', 'type': 'function', 'url': 'LazySet.type.html#complement', 'doc': '<p>Returns a new <code>Set</code> containing all the elements in\nthis <code>Set</code> that are not contained in the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.equals', 'type': 'function', 'url': 'LazySet.type.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet.hash', 'type': 'attribute', 'url': 'LazySet.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazySet', 'type': 'class', 'url': 'LazySet.type.html', 'doc': '<p>An implementation of <code>Set</code> that wraps an <code>Iterable</code> of\nelements.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'concatenate', 'type': 'function', 'url': 'index.html#concatenate', 'doc': '<p>Given a list of iterable objects, return a new sequence\nof all elements of the all given objects.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'byIncreasing', 'type': 'function', 'url': 'index.html#byIncreasing', 'doc': '<p>A comparator which orders elements in increasing order\naccording to the <code>Comparable</code> returned by the given\n`…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.version', 'type': 'value', 'url': 'language.object.html#version', 'doc': '<p>The Ceylon language version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.majorVersion', 'type': 'value', 'url': 'language.object.html#majorVersion', 'doc': '<p>The Ceylon language major version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.minorVersion', 'type': 'value', 'url': 'language.object.html#minorVersion', 'doc': '<p>The Ceylon language minor version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.releaseVersion', 'type': 'value', 'url': 'language.object.html#releaseVersion', 'doc': '<p>The Ceylon language release version.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.versionName', 'type': 'value', 'url': 'language.object.html#versionName', 'doc': '<p>The Ceylon language release name.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.majorVersionBinary', 'type': 'value', 'url': 'language.object.html#majorVersionBinary', 'doc': '<p>The major version of the code generated for the underlying runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language.minorVersionBinary', 'type': 'value', 'url': 'language.object.html#minorVersionBinary', 'doc': '<p>The minor version of the code generated for the underlying runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'language', 'type': 'object', 'url': 'language.object.html', 'doc': '<p>Contains information about the language</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'language', 'type': 'value', 'url': 'index.html#language', 'doc': '<p>Contains information about the language</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Range.string', 'type': 'attribute', 'url': 'Range.type.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.decreasing', 'type': 'attribute', 'url': 'Range.type.html#decreasing', 'doc': '<p>Determines if the range is decreasing.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Range.size', 'type': 'attribute', 'url': 'Range.type.html#size', 'doc': '<p>The nonzero number of elements in the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.lastIndex', 'type': 'attribute', 'url': 'Range.type.html#lastIndex', 'doc': '<p>The index of the end of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.rest', 'type': 'attribute', 'url': 'Range.type.html#rest', 'doc': '<p>The rest of the range, without the start of the\nrange.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.get', 'type': 'function', 'url': 'Range.type.html#get', 'doc': '<p>The element of the range that occurs <code>n</code> values after\nthe start of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.iterator', 'type': 'function', 'url': 'Range.type.html#iterator', 'doc': '<p>An iterator for the elements of the range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.by', 'type': 'function', 'url': 'Range.type.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.count', 'type': 'function', 'url': 'Range.type.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.contains', 'type': 'function', 'url': 'Range.type.html#contains', 'doc': '<p>Determines if this range includes the given object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.occurs', 'type': 'function', 'url': 'Range.type.html#occurs', 'doc': '<p>Determines if this range includes the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.containsElement', 'type': 'function', 'url': 'Range.type.html#containsElement', 'doc': '<p>Determines if the range includes the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Range.includes', 'type': 'function', 'url': 'Range.type.html#includes', 'doc': '<p>Determine if the given list occurs at some index in\nthis list.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.includesRange', 'type': 'function', 'url': 'Range.type.html#includesRange', 'doc': '<p>Determines if this range includes the given range.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Range.equals', 'type': 'function', 'url': 'Range.type.html#equals', 'doc': '<p>Determines if two ranges are the same by comparing\ntheir endpoints.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.clone', 'type': 'attribute', 'url': 'Range.type.html#clone', 'doc': '<p>Returns the range itself, since ranges are\nimmutable.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.segment', 'type': 'function', 'url': 'Range.type.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.span', 'type': 'function', 'url': 'Range.type.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.spanTo', 'type': 'function', 'url': 'Range.type.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.spanFrom', 'type': 'function', 'url': 'Range.type.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.reversed', 'type': 'attribute', 'url': 'Range.type.html#reversed', 'doc': '<p>Reverse this range, returning a new range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Range.skipping', 'type': 'function', 'url': 'Range.type.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.taking', 'type': 'function', 'url': 'Range.type.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.coalesced', 'type': 'attribute', 'url': 'Range.type.html#coalesced', 'doc': '<p>Returns the range itself, since a Range cannot\ncontain nulls.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range.sequence', 'type': 'attribute', 'url': 'Range.type.html#sequence', 'doc': '<p>Returns this range.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Range', 'type': 'class', 'url': 'Range.type.html', 'doc': '<p>Represents the range of totally ordered, ordinal values\ngenerated by two endpoints of type <code>Ordinal</code> and\n<code>Comparable</code>…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'byKey', 'type': 'function', 'url': 'index.html#byKey', 'doc': '<p>A comparator for <code>Entry</code>s which compares their keys\naccording to the given <code>comparing()</code> function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Category.contains', 'type': 'function', 'url': 'Category.type.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Category.containsEvery', 'type': 'function', 'url': 'Category.type.html#containsEvery', 'doc': '<p>Determines if every one of the given values belongs\nto this <code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Category.containsAny', 'type': 'function', 'url': 'Category.type.html#containsAny', 'doc': '<p>Determines if any one of the given values belongs\nto this <code>Category</code></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Category', 'type': 'interface', 'url': 'Category.type.html', 'doc': '<p>Abstract supertype of objects that contain other\nvalues, called <em>elements</em>, where it is possible to\nefficiently…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Anything', 'type': 'class', 'url': 'Anything.type.html', 'doc': '<p>The abstract supertype of all types.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'min', 'type': 'function', 'url': 'index.html#min', 'doc': '<p>Given a nonempty stream of <code>Comparable</code> values,\nreturn the smallest value in the stream.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'entries', 'type': 'function', 'url': 'index.html#entries', 'doc': '<p>Given a stream of items, produce a stream of entries.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AnnotationAnnotation', 'type': 'class', 'url': 'AnnotationAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#annotation\' title=\'Go to ceylon.language::annotation\'>annotation</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'annotation', 'type': 'function', 'url': 'index.html#annotation', 'doc': '<p>Annotation to mark a class as an <em>annotation class</em>, or a\ntop-level function as an <em>annotation constructor</em>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'SharedAnnotation', 'type': 'class', 'url': 'SharedAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#shared\' title=\'Go to ceylon.language::shared\'>shared</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'shared', 'type': 'function', 'url': 'index.html#shared', 'doc': '<p>Annotation to mark a type or member as shared.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'VariableAnnotation', 'type': 'class', 'url': 'VariableAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#variable\' title=\'Go to ceylon.language::variable\'>variable</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'variable', 'type': 'function', 'url': 'index.html#variable', 'doc': '<p>Annotation to mark an value as variable.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'AbstractAnnotation', 'type': 'class', 'url': 'AbstractAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#abstract\' title=\'Go to ceylon.language::abstract\'>abstract</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'abstract', 'type': 'function', 'url': 'index.html#abstract', 'doc': '<p>Annotation to mark a class as abstract.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'FinalAnnotation', 'type': 'class', 'url': 'FinalAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#final\' title=\'Go to ceylon.language::final\'>final</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'final', 'type': 'function', 'url': 'index.html#final', 'doc': '<p>Annotation to mark a class as final.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'ActualAnnotation', 'type': 'class', 'url': 'ActualAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#actual\' title=\'Go to ceylon.language::actual\'>actual</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'actual', 'type': 'function', 'url': 'index.html#actual', 'doc': '<p>Annotation to mark a member of a type as refining a member\nof a supertype.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'FormalAnnotation', 'type': 'class', 'url': 'FormalAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#formal\' title=\'Go to ceylon.language::formal\'>formal</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'formal', 'type': 'function', 'url': 'index.html#formal', 'doc': '<p>Annotation to mark a member whose implementation must be\nprovided by subtypes.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'DefaultAnnotation', 'type': 'class', 'url': 'DefaultAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#default\' title=\'Go to ceylon.language::default\'>default</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'default', 'type': 'function', 'url': 'index.html#default', 'doc': '<p>Annotation to mark a member whose implementation may be\nrefined by subtypes.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'LateAnnotation', 'type': 'class', 'url': 'LateAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#late\' title=\'Go to ceylon.language::late\'>late</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'late', 'type': 'function', 'url': 'index.html#late', 'doc': '<p>Annotation to disable definite initialization analysis for\na reference.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'NativeAnnotation', 'type': 'class', 'url': 'NativeAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#native\' title=\'Go to ceylon.language::native\'>native</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'native', 'type': 'function', 'url': 'index.html#native', 'doc': '<p>Annotation to mark a member whose implementation is defined\nin platform-native code.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'DocAnnotation', 'type': 'class', 'url': 'DocAnnotation.type.html', 'doc': '<p>The annotation class for the <a class=\'link\' href=\'index.html#doc\' title=\'Go to ceylon.language::doc\'>doc</a> annotation.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'doc', 'type': 'function', 'url': 'index.html#doc', 'doc': '<p>Annotation to specify API documentation of a program\nelement.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'SeeAnnotation', 'type': 'class', 'url': 'SeeAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#see\' title=\'Go to ceylon.language::see\'>see</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'see', 'type': 'function', 'url': 'index.html#see', 'doc': '<p>Annotation to specify API references to other related\nprogram elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'AuthorsAnnotation', 'type': 'class', 'url': 'AuthorsAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#by\' title=\'Go to ceylon.language::by\'>by</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'by', 'type': 'function', 'url': 'index.html#by', 'doc': '<p>Annotation to specify API authors.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'ThrownExceptionAnnotation', 'type': 'class', 'url': 'ThrownExceptionAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#throws\' title=\'Go to ceylon.language::throws\'>throws</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'throws', 'type': 'function', 'url': 'index.html#throws', 'doc': '<p>Annotation to mark a program element that throws an\nexception.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'DeprecationAnnotation.reason', 'type': 'attribute', 'url': 'DeprecationAnnotation.type.html#reason', 'doc': '<p>A description, in Markdown syntax, of why the element is deprecated,\nand what replacements are available, or null.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'DeprecationAnnotation', 'type': 'class', 'url': 'DeprecationAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#deprecated\' title=\'Go to ceylon.language::deprecated\'>deprecated</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'deprecated', 'type': 'function', 'url': 'index.html#deprecated', 'doc': '<p>Annotation to mark program elements which should not be\nused anymore.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'TagsAnnotation', 'type': 'class', 'url': 'TagsAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#tagged\' title=\'Go to ceylon.language::tagged\'>tagged</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'tagged', 'type': 'function', 'url': 'index.html#tagged', 'doc': '<p>Annotation to categorize the API by tag.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'LicenseAnnotation', 'type': 'class', 'url': 'LicenseAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#license\' title=\'Go to ceylon.language::license\'>license</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'license', 'type': 'function', 'url': 'index.html#license', 'doc': '<p>Annotation to specify the URL of the license of a module or\npackage.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'OptionalImportAnnotation', 'type': 'class', 'url': 'OptionalImportAnnotation.type.html', 'doc': '<p>The annotation class for <a class=\'link\' href=\'index.html#optional\' title=\'Go to ceylon.language::optional\'>optional</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-annotation']},
{'name': 'optional', 'type': 'function', 'url': 'index.html#optional', 'doc': '<p>Annotation to specify that a module can be executed even if\nthe annotated dependency is not available.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-annotation']},
{'name': 'lessThan', 'type': 'function', 'url': 'index.html#lessThan', 'doc': '<p>Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Callable', 'type': 'interface', 'url': 'Callable.type.html', 'doc': '<p>A reference to a function.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'compose', 'type': 'function', 'url': 'index.html#compose', 'doc': '<p>Given a function with return type <code>Y</code>, and a second\nfunction with a single parameter also of type <code>Y</code>,\nreturn the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'any', 'type': 'function', 'url': 'index.html#any', 'doc': '<p>Determines if any one of the given boolean values\n(usually a comprehension) is <code>true</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exception.message', 'type': 'attribute', 'url': 'Exception.type.html#message', 'doc': '<p>A message describing the problem.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exception.string', 'type': 'attribute', 'url': 'Exception.type.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Exception.printStackTrace', 'type': 'function', 'url': 'Exception.type.html#printStackTrace', 'doc': '<p>Print the stack trace to the standard error of\nthe virtual machine process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exception', 'type': 'class', 'url': 'Exception.type.html', 'doc': '<p>The supertype of all exceptions.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Integral.remainder', 'type': 'function', 'url': 'Integral.type.html#remainder', 'doc': '<p>The remainder, after dividing this number by the\ngiven number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Integral.zero', 'type': 'value', 'url': 'Integral.type.html#zero', 'doc': '<p>Determine if the number is zero.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Integral.unit', 'type': 'value', 'url': 'Integral.type.html#unit', 'doc': '<p>Determine if the number is one.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Integral.divides', 'type': 'function', 'url': 'Integral.type.html#divides', 'doc': '<p>Determine if this number is a factor of the given\nnumber.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Integral', 'type': 'interface', 'url': 'Integral.type.html', 'doc': '<p>Abstraction of integral numeric types.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'greaterThan', 'type': 'function', 'url': 'index.html#greaterThan', 'doc': '<p>Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'smallest', 'type': 'function', 'url': 'index.html#smallest', 'doc': '<p>Given two <code>Comparable</code> values, return smallest of the\ntwo.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'nothing', 'type': 'attribute', 'url': 'index.html#nothing', 'doc': '<p>A value that is assignable to any type, but that\nresults in an exception when evaluated.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'print', 'type': 'function', 'url': 'index.html#print', 'doc': '<p>Print a line to the standard output of the virtual machine\nprocess, printing the given value\'s <code>string</code>, or <code>&lt;null&gt;</code>…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'printAll', 'type': 'function', 'url': 'index.html#printAll', 'doc': '<p>Print multiple values to the standard output of the virtual\nmachine process as a single line of text, separated by a…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'apply', 'type': 'function', 'url': 'index.html#apply', 'doc': '<p>Applies an arbitrary <code>Callable</code> to the specified arguments.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'byDecreasing', 'type': 'function', 'url': 'index.html#byDecreasing', 'doc': '<p>A comparator which orders elements in decreasing order\naccording to the <code>Comparable</code> returned by the given\n`…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Finished', 'type': 'class', 'url': 'Finished.type.html', 'doc': '<p>The type of the value that indicates that\nan <code>Iterator</code> is exhausted and has no more\nvalues to return.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'finished.string', 'type': 'attribute', 'url': 'finished.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'finished', 'type': 'object', 'url': 'finished.object.html', 'doc': '<p>A value that indicates that an <code>Iterator</code>\nis exhausted and has no more values to\nreturn.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'finished', 'type': 'value', 'url': 'index.html#finished', 'doc': '<p>A value that indicates that an <code>Iterator</code>\nis exhausted and has no more values to\nreturn.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Entry.pair', 'type': 'attribute', 'url': 'Entry.type.html#pair', 'doc': '<p>A pair (2 element tuple) with the key and\nitem of this entry.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Entry.equals', 'type': 'function', 'url': 'Entry.type.html#equals', 'doc': '<p>Determines if this entry is equal to the given entry.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Entry.string', 'type': 'attribute', 'url': 'Entry.type.html#string', 'doc': '<p>Returns a description of the entry in the form\n<code>key-&gt;item</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Entry.hash', 'type': 'value', 'url': 'Entry.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Entry', 'type': 'class', 'url': 'Entry.type.html', 'doc': '<p>A pair containing a <em>key</em> and an associated value called\nthe <em>item</em>.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'curry', 'type': 'function', 'url': 'index.html#curry', 'doc': '<p>Curries a function, returning a function with two\nparameter lists, given a function with at least\none parameter.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'uncurry', 'type': 'function', 'url': 'index.html#uncurry', 'doc': '<p>Uncurries a function, returning a function with\none parameter list, given a function with two\nparameter lists, where…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Comparison.largerThan', 'type': 'function', 'url': 'Comparison.type.html#largerThan', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.smallerThan', 'type': 'function', 'url': 'Comparison.type.html#smallerThan', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.equal', 'type': 'function', 'url': 'Comparison.type.html#equal', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.unequal', 'type': 'function', 'url': 'Comparison.type.html#unequal', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.asLargeAs', 'type': 'function', 'url': 'Comparison.type.html#asLargeAs', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison.asSmallAs', 'type': 'function', 'url': 'Comparison.type.html#asSmallAs', 'doc': '', 'tags': [],'icons': ['icon-decoration-deprecated', 'icon-shared-member']},
{'name': 'Comparison', 'type': 'class', 'url': 'Comparison.type.html', 'doc': '<p>The result of a comparison between two <code>Comparable</code>\nobjects.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'equal', 'type': 'object', 'url': 'equal.object.html', 'doc': '<p>The value is exactly equal to the given value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'equal', 'type': 'value', 'url': 'index.html#equal', 'doc': '<p>The value is exactly equal to the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'smaller', 'type': 'object', 'url': 'smaller.object.html', 'doc': '<p>The value is smaller than the given value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'smaller', 'type': 'value', 'url': 'index.html#smaller', 'doc': '<p>The value is smaller than the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'larger', 'type': 'object', 'url': 'larger.object.html', 'doc': '<p>The value is larger than the given value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'larger', 'type': 'value', 'url': 'index.html#larger', 'doc': '<p>The value is larger than the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'sum', 'type': 'function', 'url': 'index.html#sum', 'doc': '<p>Given a nonempty stream of <code>Summable</code> values, return\nthe sum of the values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Binary.not', 'type': 'value', 'url': 'Binary.type.html#not', 'doc': '<p>The binary complement of this sequence of bits.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.size', 'type': 'value', 'url': 'Binary.type.html#size', 'doc': '<p>The number of bits (0 or 1) that this sequence of bits can hold.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.leftLogicalShift', 'type': 'function', 'url': 'Binary.type.html#leftLogicalShift', 'doc': '<p>Performs a left logical shift.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.rightLogicalShift', 'type': 'function', 'url': 'Binary.type.html#rightLogicalShift', 'doc': '<p>Performs a right logical shift.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.rightArithmeticShift', 'type': 'function', 'url': 'Binary.type.html#rightArithmeticShift', 'doc': '<p>Performs a right arithmetic shift.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.and', 'type': 'function', 'url': 'Binary.type.html#and', 'doc': '<p>Performs a logical AND operation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.or', 'type': 'function', 'url': 'Binary.type.html#or', 'doc': '<p>Performs a logical inclusive OR operation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.xor', 'type': 'function', 'url': 'Binary.type.html#xor', 'doc': '<p>Performs a logical exclusive OR operation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.get', 'type': 'function', 'url': 'Binary.type.html#get', 'doc': '<p>Retrieves a given bit from this bit sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.set', 'type': 'function', 'url': 'Binary.type.html#set', 'doc': '<p>Returns a new number with the given bit set to the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary.clear', 'type': 'function', 'url': 'Binary.type.html#clear', 'doc': '<p>Returns a new number with the given bit set to 0.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Binary.flip', 'type': 'function', 'url': 'Binary.type.html#flip', 'doc': '<p>Returns a new number with the given bit flipped to its opposite value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Binary', 'type': 'interface', 'url': 'Binary.type.html', 'doc': '<p>Abstraction of numeric types like <code>Integer</code> that may be\nrepresented as a sequence of bits, and may be the subject\nof…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Scalable.scale', 'type': 'function', 'url': 'Scalable.type.html#scale', 'doc': '<p>Scale this value by the given scale factor.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Scalable', 'type': 'interface', 'url': 'Scalable.type.html', 'doc': '<p>Abstract supertype of types that support scaling by\na numeric factor <code>s ** x</code>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'system.milliseconds', 'type': 'value', 'url': 'system.object.html#milliseconds', 'doc': '<p>The elapsed time in milliseconds since midnight, 1 January 1970.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'system.nanoseconds', 'type': 'value', 'url': 'system.object.html#nanoseconds', 'doc': '<p>The elapsed time in nanoseconds since an arbitrary starting point.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'system.timezoneOffset', 'type': 'value', 'url': 'system.object.html#timezoneOffset', 'doc': '<p>Returns the offset from UTC, in milliseconds, of the default timezone for this system.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'system.locale', 'type': 'value', 'url': 'system.object.html#locale', 'doc': '<p>Returns the IETF language tag representing the default locale for this system.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'system.string', 'type': 'value', 'url': 'system.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'system', 'type': 'object', 'url': 'system.object.html', 'doc': '<p>Represents the system on which the current process is running.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'system', 'type': 'value', 'url': 'index.html#system', 'doc': '<p>Represents the system on which the current process is running.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Identifiable.equals', 'type': 'function', 'url': 'Identifiable.type.html#equals', 'doc': '<p>Identity equality comparing the identity of the two\nvalues.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Identifiable.hash', 'type': 'attribute', 'url': 'Identifiable.type.html#hash', 'doc': '<p>The system-defined identity hash value of the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Identifiable', 'type': 'interface', 'url': 'Identifiable.type.html', 'doc': '<p>The abstract supertype of all types with a well-defined\nnotion of identity.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Iterator.next', 'type': 'function', 'url': 'Iterator.type.html#next', 'doc': '<p>The next element, or <code>finished</code> if there are no\nmore elements to be iterated.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Iterator', 'type': 'interface', 'url': 'Iterator.type.html', 'doc': '<p>Produces elements of an <code>Iterable</code> object.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'flatten', 'type': 'function', 'url': 'index.html#flatten', 'doc': '<p>Given a function with a single parameter of tuple type\n<code>[P1, P2, ..., Pn]</code>, return a function with multiple…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'unflatten', 'type': 'function', 'url': 'index.html#unflatten', 'doc': '<p>Given a function with parameter types\n<code>P1</code>, <code>P2</code>, &hellip;, <code>Pn</code>, return a function with a single\nparameter of tuple type `…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.lastIndex', 'type': 'value', 'url': 'List.type.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'List.size', 'type': 'attribute', 'url': 'List.type.html#size', 'doc': '<p>The number of elements in this sequence, always\n<code>sequence.lastIndex+1</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.shorterThan', 'type': 'function', 'url': 'List.type.html#shorterThan', 'doc': '<p>Determines if this iterable object has fewer elements\nthan the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.longerThan', 'type': 'function', 'url': 'List.type.html#longerThan', 'doc': '<p>Determines if this iterable object has more elements\nthan the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.rest', 'type': 'value', 'url': 'List.type.html#rest', 'doc': '<p>The rest of the list, without the first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'List.defines', 'type': 'function', 'url': 'List.type.html#defines', 'doc': '<p>Determines if the given index refers to an element</p>\n<pre>of this sequence, that is, if\n`index&lt;=sequence.lastIndex`.\n</pre>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.get', 'type': 'function', 'url': 'List.type.html#get', 'doc': '<p>Returns the element of this sequence with the given</p>\n<pre>index, or `null` if the given index is past the end\nof the…\n</pre>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'List.iterator', 'type': 'function', 'url': 'List.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.reversed', 'type': 'value', 'url': 'List.type.html#reversed', 'doc': '<p>Reverse this list, returning a new list.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'List.equals', 'type': 'function', 'url': 'List.type.html#equals', 'doc': '<p>Two <code>List</code>s are considered equal iff they have the\nsame <code>size</code> and <em>entry sets</em>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.hash', 'type': 'attribute', 'url': 'List.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.findLast', 'type': 'function', 'url': 'List.type.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.first', 'type': 'attribute', 'url': 'List.type.html#first', 'doc': '<p>Returns the first element of this <code>List</code>, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.last', 'type': 'attribute', 'url': 'List.type.html#last', 'doc': '<p>Returns the last element of this <code>List</code>, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'List.withLeading', 'type': 'function', 'url': 'List.type.html#withLeading', 'doc': '<p>Returns a new <code>List</code> that starts with the specified\nelement, followed by the elements of this <code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.withTrailing', 'type': 'function', 'url': 'List.type.html#withTrailing', 'doc': '<p>Returns a new <code>List</code> that contains the specified\nelement appended to the end of the elements of this\n<code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.startsWith', 'type': 'function', 'url': 'List.type.html#startsWith', 'doc': '<p>Determine if the given list occurs at the start of this\nlist.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.endsWith', 'type': 'function', 'url': 'List.type.html#endsWith', 'doc': '<p>Determine if the given list occurs at the end of this\nlist.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.includesAt', 'type': 'function', 'url': 'List.type.html#includesAt', 'doc': '<p>Determine if the given list occurs at the given index\nof this list.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.includes', 'type': 'function', 'url': 'List.type.html#includes', 'doc': '<p>Determine if the given list occurs at some index in\nthis list.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.inclusions', 'type': 'function', 'url': 'List.type.html#inclusions', 'doc': '<p>The indexes in this list at which the given list\noccurs.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.firstInclusion', 'type': 'function', 'url': 'List.type.html#firstInclusion', 'doc': '<p>The first index in this list at which the given list\noccurs.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.lastInclusion', 'type': 'function', 'url': 'List.type.html#lastInclusion', 'doc': '<p>The last index in this list at which the given list\noccurs.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.occursAt', 'type': 'function', 'url': 'List.type.html#occursAt', 'doc': '<p>Determines if the given value occurs at the\ngiven index in this list.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.occurs', 'type': 'function', 'url': 'List.type.html#occurs', 'doc': '<p>Determines if the given value occurs as an\nelement in this list.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.contains', 'type': 'function', 'url': 'List.type.html#contains', 'doc': '<p>Determines if this list contains the given\nvalue.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'List.occurrences', 'type': 'function', 'url': 'List.type.html#occurrences', 'doc': '<p>The indexes in this list at which the given element\noccurs.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.firstOccurrence', 'type': 'function', 'url': 'List.type.html#firstOccurrence', 'doc': '<p>The first index in this list at which the given element\noccurs.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.lastOccurrence', 'type': 'function', 'url': 'List.type.html#lastOccurrence', 'doc': '<p>The last index in this list at which the given element\noccurs.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.indexes', 'type': 'function', 'url': 'List.type.html#indexes', 'doc': '<p>The indexes in this list for which the element\nsatisfies the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.trim', 'type': 'function', 'url': 'List.type.html#trim', 'doc': '<p>Trim the elements satisfying the given predicate\nfunction from the start and end of this list,\nreturning a list no…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.trimLeading', 'type': 'function', 'url': 'List.type.html#trimLeading', 'doc': '<p>Trim the elements satisfying the given predicate\nfunction from the start of this list, returning\na list no longer than…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.trimTrailing', 'type': 'function', 'url': 'List.type.html#trimTrailing', 'doc': '<p>Trim the elements satisfying the given predicate\nfunction from the end of this list, returning a\nlist no longer than…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.initial', 'type': 'function', 'url': 'List.type.html#initial', 'doc': '<p>Select the first elements of this list, returning a\nlist no longer than the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List.terminal', 'type': 'function', 'url': 'List.type.html#terminal', 'doc': '<p>Select the last elements of the list, returning a list\nno longer than the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'List', 'type': 'interface', 'url': 'List.type.html', 'doc': '<p>Represents a collection in which every element has a\nunique non-negative integer index.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'unzip', 'type': 'function', 'url': 'index.html#unzip', 'doc': '<p>Given a stream of tuples, return two streams.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'unzipPairs', 'type': 'function', 'url': 'index.html#unzipPairs', 'doc': '<p>Given a stream of pairs, return two streams.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'unzipEntries', 'type': 'function', 'url': 'index.html#unzipEntries', 'doc': '<p>Given a stream of entries, return two streams.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'first', 'type': 'function', 'url': 'index.html#first', 'doc': '<p>The first of the given values (usually a comprehension),\nif any.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'shuffle', 'type': 'function', 'url': 'index.html#shuffle', 'doc': '<p>Given a function with two parameter lists, return\na function with the order of the argument lists\nreversed.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Object.equals', 'type': 'function', 'url': 'Object.type.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Object.hash', 'type': 'attribute', 'url': 'Object.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Object.string', 'type': 'attribute', 'url': 'Object.type.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Object', 'type': 'class', 'url': 'Object.type.html', 'doc': '<p>The abstract supertype of all types representing\ndefinite values.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'Ordinal.successor', 'type': 'value', 'url': 'Ordinal.type.html#successor', 'doc': '<p>The successor of this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ordinal.predecessor', 'type': 'value', 'url': 'Ordinal.type.html#predecessor', 'doc': '<p>The predecessor of this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ordinal', 'type': 'interface', 'url': 'Ordinal.type.html', 'doc': '<p>Abstraction of ordinal types, that is, types with\nsuccessor and predecessor operations, including\n<code>Integer</code> and other…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Enumerable.integerValue', 'type': 'value', 'url': 'Enumerable.type.html#integerValue', 'doc': '<p>The corresponding integer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Enumerable', 'type': 'interface', 'url': 'Enumerable.type.html', 'doc': '<p>Abstraction of ordinal types whose instances can be\nmapped to the integers or to a range of integers.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'largest', 'type': 'function', 'url': 'index.html#largest', 'doc': '<p>Given two <code>Comparable</code> values, return largest of the\ntwo.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'identical', 'type': 'function', 'url': 'index.html#identical', 'doc': '<p>Determine if the arguments are identical.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Sequential.reversed', 'type': 'value', 'url': 'Sequential.type.html#reversed', 'doc': '<p>Reverse this sequence, returning a new sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequential.sequence', 'type': 'attribute', 'url': 'Sequential.type.html#sequence', 'doc': '<p>This sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.rest', 'type': 'value', 'url': 'Sequential.type.html#rest', 'doc': '<p>The rest of the sequence, without the first\nelement.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Sequential.repeat', 'type': 'function', 'url': 'Sequential.type.html#repeat', 'doc': '<p>Returns a sequence formed by repeating the elements of\nthis sequence the given number of times, or an empty\nsequence…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.initial', 'type': 'function', 'url': 'Sequential.type.html#initial', 'doc': '<p>Select the first elements of this sequence, returning\na sequence no longer than the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.terminal', 'type': 'function', 'url': 'Sequential.type.html#terminal', 'doc': '<p>Select the last elements of the sequence, returning a\nsequence no longer than the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.trim', 'type': 'function', 'url': 'Sequential.type.html#trim', 'doc': '<p>Trim the elements satisfying the given predicate\nfunction from the start and end of this sequence,\nreturning a…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.trimLeading', 'type': 'function', 'url': 'Sequential.type.html#trimLeading', 'doc': '<p>Trim the elements satisfying the given predicate\nfunction from the start of this sequence, returning\na sequence no…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.trimTrailing', 'type': 'function', 'url': 'Sequential.type.html#trimTrailing', 'doc': '<p>Trim the elements satisfying the given predicate\nfunction from the end of this sequence, returning\na sequence no…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential.clone', 'type': 'attribute', 'url': 'Sequential.type.html#clone', 'doc': '<p>This sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Sequential.string', 'type': 'attribute', 'url': 'Sequential.type.html#string', 'doc': '<p>A string of form <code>"[ x, y, z ]"</code> where <code>x</code>, <code>y</code>,\nand <code>z</code> are the <code>string</code> representations of the\nelements of this…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequential', 'type': 'interface', 'url': 'Sequential.type.html', 'doc': '<p>A possibly-empty, immutable sequence of values.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Basic', 'type': 'class', 'url': 'Basic.type.html', 'doc': '<p>The default superclass when no superclass is explicitly\nspecified using <code>extends</code>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'forKey', 'type': 'function', 'url': 'index.html#forKey', 'doc': '<p>A function that returns the result of the given <code>resulting()</code> function\non the key of a given <code>Entry</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Summable.plus', 'type': 'function', 'url': 'Summable.type.html#plus', 'doc': '<p>The result of adding the given value to this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Summable', 'type': 'interface', 'url': 'Summable.type.html', 'doc': '<p>Abstraction of types which support a binary addition\noperator <code>x + y</code>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'className', 'type': 'function', 'url': 'index.html#className', 'doc': '<p>Return the name of the concrete class of the given\nobject, in a format native to the virtual machine.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'zipEntries', 'type': 'function', 'url': 'index.html#zipEntries', 'doc': '<p>Given two streams, form a new stream consisting of\nall entries where, for any given index in the resulting\nstream, the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'zipPairs', 'type': 'function', 'url': 'index.html#zipPairs', 'doc': '<p>Given two streams, form a new stream consisting of\nall pairs where, for any given index in the resulting\nstream, the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'zip', 'type': 'function', 'url': 'index.html#zip', 'doc': '<p>Given a stream of values, and a stream of tuples, produce\na new stream of tuples formed by prepending the values in\nthe…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'NegativeNumberException', 'type': 'class', 'url': 'NegativeNumberException.type.html', 'doc': '<p>Thrown when a negative number is not allowed.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'infinity', 'type': 'value', 'url': 'index.html#infinity', 'doc': '<p>An instance of <code>Float</code> representing positive infinity\n∞.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.undefined', 'type': 'attribute', 'url': 'Float.type.html#undefined', 'doc': '<p>Determines whether this value is undefined (that is,\nNot a Number or NaN).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.infinite', 'type': 'attribute', 'url': 'Float.type.html#infinite', 'doc': '<p>Determines whether this value is infinite in\nmagnitude.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.finite', 'type': 'attribute', 'url': 'Float.type.html#finite', 'doc': '<p>Determines whether this value is finite.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.sign', 'type': 'value', 'url': 'Float.type.html#sign', 'doc': '<p>The sign of this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Float.positive', 'type': 'value', 'url': 'Float.type.html#positive', 'doc': '<p>Determines if this value is a positive number or\n<code>infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Float.negative', 'type': 'value', 'url': 'Float.type.html#negative', 'doc': '<p>Determines if this value is a negative number or\n<code>-infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Float.strictlyPositive', 'type': 'value', 'url': 'Float.type.html#strictlyPositive', 'doc': '<p>Determines if this value is a positive number, <code>+0</code>,\nor <code>infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float.strictlyNegative', 'type': 'value', 'url': 'Float.type.html#strictlyNegative', 'doc': '<p>Determines if this value is a negative number, <code>-0</code>,\nor <code>-infinity</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Float', 'type': 'class', 'url': 'Float.type.html', 'doc': '<p>An IEEE 754 64-bit [floating point number][].</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'parseFloat', 'type': 'function', 'url': 'index.html#parseFloat', 'doc': '<p>The <code>Float</code> value of the given string representation of\na decimal number or <code>null</code> if the string does not\nrepresent a…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Empty.iterator', 'type': 'function', 'url': 'Empty.type.html#iterator', 'doc': '<p>Returns an iterator that is already exhausted.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.get', 'type': 'function', 'url': 'Empty.type.html#get', 'doc': '<p>Returns <code>null</code> for any given index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.segment', 'type': 'function', 'url': 'Empty.type.html#segment', 'doc': '<p>Returns an <code>Empty</code> for any given segment.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.span', 'type': 'function', 'url': 'Empty.type.html#span', 'doc': '<p>Returns an <code>Empty</code> for any given span.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.spanTo', 'type': 'function', 'url': 'Empty.type.html#spanTo', 'doc': '<p>Returns an <code>Empty</code> for any given span.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.spanFrom', 'type': 'function', 'url': 'Empty.type.html#spanFrom', 'doc': '<p>Returns an <code>Empty</code> for any given span.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.empty', 'type': 'attribute', 'url': 'Empty.type.html#empty', 'doc': '<p>Returns <code>true</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.size', 'type': 'attribute', 'url': 'Empty.type.html#size', 'doc': '<p>Returns 0.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.reversed', 'type': 'attribute', 'url': 'Empty.type.html#reversed', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.sequence', 'type': 'attribute', 'url': 'Empty.type.html#sequence', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.string', 'type': 'attribute', 'url': 'Empty.type.html#string', 'doc': '<p>Returns a string description of the empty sequence:\n<code>{}</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.lastIndex', 'type': 'attribute', 'url': 'Empty.type.html#lastIndex', 'doc': '<p>Returns <code>null</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.first', 'type': 'attribute', 'url': 'Empty.type.html#first', 'doc': '<p>Returns <code>null</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.last', 'type': 'attribute', 'url': 'Empty.type.html#last', 'doc': '<p>Returns <code>null</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.rest', 'type': 'attribute', 'url': 'Empty.type.html#rest', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.clone', 'type': 'attribute', 'url': 'Empty.type.html#clone', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.coalesced', 'type': 'attribute', 'url': 'Empty.type.html#coalesced', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.indexed', 'type': 'attribute', 'url': 'Empty.type.html#indexed', 'doc': '<p>Returns an <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.chain', 'type': 'function', 'url': 'Empty.type.html#chain', 'doc': '<p>Returns <code>other</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.contains', 'type': 'function', 'url': 'Empty.type.html#contains', 'doc': '<p>Returns <code>false</code> for any given element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Empty.count', 'type': 'function', 'url': 'Empty.type.html#count', 'doc': '<p>Returns 0 for any given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.defines', 'type': 'function', 'url': 'Empty.type.html#defines', 'doc': '<p>Determines if there is a value defined for the\ngiven key.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.map', 'type': 'function', 'url': 'Empty.type.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.filter', 'type': 'function', 'url': 'Empty.type.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.fold', 'type': 'function', 'url': 'Empty.type.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.find', 'type': 'function', 'url': 'Empty.type.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.sort', 'type': 'function', 'url': 'Empty.type.html#sort', 'doc': '<p>A sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order upon the…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.collect', 'type': 'function', 'url': 'Empty.type.html#collect', 'doc': '<p>A sequence containing the results of applying the\ngiven mapping to the elements of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.select', 'type': 'function', 'url': 'Empty.type.html#select', 'doc': '<p>A sequence containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.any', 'type': 'function', 'url': 'Empty.type.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.every', 'type': 'function', 'url': 'Empty.type.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.skipping', 'type': 'function', 'url': 'Empty.type.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.taking', 'type': 'function', 'url': 'Empty.type.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.by', 'type': 'function', 'url': 'Empty.type.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.withLeading', 'type': 'function', 'url': 'Empty.type.html#withLeading', 'doc': '<p>Returns a new <code>List</code> that starts with the specified\nelement, followed by the elements of this <code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.withTrailing', 'type': 'function', 'url': 'Empty.type.html#withTrailing', 'doc': '<p>Returns a new <code>List</code> that contains the specified\nelement appended to the end of the elements of this\n<code>List</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty.following', 'type': 'function', 'url': 'Empty.type.html#following', 'doc': '<p>An <code>Iterable</code> with the given inital element followed\nby the elements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Empty', 'type': 'interface', 'url': 'Empty.type.html', 'doc': '<p>A sequence with no elements.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'empty', 'type': 'object', 'url': 'empty.object.html', 'doc': '<p>A sequence with no elements, abbreviated <code>[]</code>.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'empty', 'type': 'value', 'url': 'index.html#empty', 'doc': '<p>A sequence with no elements, abbreviated <code>[]</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'emptyIterator.next', 'type': 'function', 'url': 'emptyIterator.object.html#next', 'doc': '<p>The next element, or <code>finished</code> if there are no\nmore elements to be iterated.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptyIterator', 'type': 'object', 'url': 'emptyIterator.object.html', 'doc': '<p>An iterator that returns no elements.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'emptyIterator', 'type': 'value', 'url': 'index.html#emptyIterator', 'doc': '<p>An iterator that returns no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'max', 'type': 'function', 'url': 'index.html#max', 'doc': '<p>Given a nonempty stream of <code>Comparable</code> values,\nreturn the largest value in the stream.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Comparable.compare', 'type': 'function', 'url': 'Comparable.type.html#compare', 'doc': '<p>Compares this value with the given value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Comparable', 'type': 'interface', 'url': 'Comparable.type.html', 'doc': '<p>The general contract for values whose magnitude can be\ncompared.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Boolean', 'type': 'class', 'url': 'Boolean.type.html', 'doc': '<p>A type capable of representing the values true and\nfalse of Boolean logic.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'true.string', 'type': 'value', 'url': 'true.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'true', 'type': 'object', 'url': 'true.object.html', 'doc': '<p>A value representing truth in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'true', 'type': 'value', 'url': 'index.html#true', 'doc': '<p>A value representing truth in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'false.string', 'type': 'value', 'url': 'false.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'false', 'type': 'object', 'url': 'false.object.html', 'doc': '<p>A value representing falsity in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'false', 'type': 'value', 'url': 'index.html#false', 'doc': '<p>A value representing falsity in Boolean logic.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'identityHash', 'type': 'function', 'url': 'index.html#identityHash', 'doc': '<p>Return the system-defined identity hash value of the\ngiven value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Scalar.magnitude', 'type': 'value', 'url': 'Scalar.type.html#magnitude', 'doc': '<p>The magnitude of this number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Scalar.fractionalPart', 'type': 'value', 'url': 'Scalar.type.html#fractionalPart', 'doc': '<p>The fractional part of the number, after truncation\nof the integral part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Scalar.wholePart', 'type': 'value', 'url': 'Scalar.type.html#wholePart', 'doc': '<p>The integral value of the number after truncation\nof the fractional part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Scalar', 'type': 'interface', 'url': 'Scalar.type.html', 'doc': '<p>Abstraction of <a class=\'link-custom-text\' href=\'Numeric.type.html\' title=\'Go to ceylon.language::Numeric\'>numeric</a> types representing\nscalar values with a <a class=\'link-custom-text\' href=\'Comparable.type.html\' title=\'Go to ceylon.language::Comparable\'>total order</a>,\nincluding the…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Sequence.lastIndex', 'type': 'value', 'url': 'Sequence.type.html#lastIndex', 'doc': '<p>The index of the last element of the sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequence.first', 'type': 'value', 'url': 'Sequence.type.html#first', 'doc': '<p>The first element of the sequence, that is, the\nelement with index <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Sequence.last', 'type': 'value', 'url': 'Sequence.type.html#last', 'doc': '<p>The last element of the sequence, that is, the\nelement with index <code>sequence.lastIndex</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Sequence.empty', 'type': 'attribute', 'url': 'Sequence.type.html#empty', 'doc': '<p>Returns <code>false</code>, since every <code>Sequence</code> contains at\nleast one element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.reversed', 'type': 'attribute', 'url': 'Sequence.type.html#reversed', 'doc': '<p>Reverse this sequence, returning a new nonempty\nsequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Sequence.sequence', 'type': 'attribute', 'url': 'Sequence.type.html#sequence', 'doc': '<p>This nonempty sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.rest', 'type': 'value', 'url': 'Sequence.type.html#rest', 'doc': '<p>The rest of the sequence, without the first\nelement.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-over']},
{'name': 'Sequence.sort', 'type': 'function', 'url': 'Sequence.type.html#sort', 'doc': '<p>A nonempty sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.collect', 'type': 'function', 'url': 'Sequence.type.html#collect', 'doc': '<p>A nonempty sequence containing the results of\napplying the given mapping to the elements of this\nsequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.clone', 'type': 'attribute', 'url': 'Sequence.type.html#clone', 'doc': '<p>This nonempty sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Sequence.string', 'type': 'attribute', 'url': 'Sequence.type.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.shorterThan', 'type': 'function', 'url': 'Sequence.type.html#shorterThan', 'doc': '<p>Determines if this iterable object has fewer elements\nthan the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.longerThan', 'type': 'function', 'url': 'Sequence.type.html#longerThan', 'doc': '<p>Determines if this iterable object has more elements\nthan the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.findLast', 'type': 'function', 'url': 'Sequence.type.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence.repeat', 'type': 'function', 'url': 'Sequence.type.html#repeat', 'doc': '<p>Returns a list formed by repeating the elements of this\niterable object the given number of times, or an empty\nlist if…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Sequence', 'type': 'interface', 'url': 'Sequence.type.html', 'doc': '<p>A nonempty, immutable sequence of values.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'operatingSystem.name', 'type': 'value', 'url': 'operatingSystem.object.html#name', 'doc': '<p>Returns the name of the operating system this process is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'operatingSystem.version', 'type': 'value', 'url': 'operatingSystem.object.html#version', 'doc': '<p>Returns the version of the operating system this process is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'operatingSystem.newline', 'type': 'value', 'url': 'operatingSystem.object.html#newline', 'doc': '<p>The line ending character sequence on this platform.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'operatingSystem.fileSeparator', 'type': 'value', 'url': 'operatingSystem.object.html#fileSeparator', 'doc': '<p>The character used on this platform to separate the folder/file elements of a path.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'operatingSystem.pathSeparator', 'type': 'value', 'url': 'operatingSystem.object.html#pathSeparator', 'doc': '<p>The character used on this platform to use as a separator between several paths in a list of paths.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'operatingSystem.string', 'type': 'value', 'url': 'operatingSystem.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'operatingSystem', 'type': 'object', 'url': 'operatingSystem.object.html', 'doc': '<p>Operating System on which the current process is running.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'operatingSystem', 'type': 'value', 'url': 'index.html#operatingSystem', 'doc': '<p>Operating System on which the current process is running.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Ranged.span', 'type': 'function', 'url': 'Ranged.type.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged.spanFrom', 'type': 'function', 'url': 'Ranged.type.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged.spanTo', 'type': 'function', 'url': 'Ranged.type.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged.segment', 'type': 'function', 'url': 'Ranged.type.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Ranged', 'type': 'interface', 'url': 'Ranged.type.html', 'doc': '<p>Abstract supertype of ranged objects which map a range\nof <code>Comparable</code> keys to ranges of values.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Invertable.negativeValue', 'type': 'value', 'url': 'Invertable.type.html#negativeValue', 'doc': '<p>The additive inverse of the value, which may be expressed\nas an instance of a wider type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Invertable.positiveValue', 'type': 'value', 'url': 'Invertable.type.html#positiveValue', 'doc': '<p>The value itself, expressed as an instance of the\nwider type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Invertable', 'type': 'interface', 'url': 'Invertable.type.html', 'doc': '<p>Abstraction of types which support a unary additive\ninversion operation <code>-x</code>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'OptionalAnnotation', 'type': 'interface', 'url': 'OptionalAnnotation.type.html', 'doc': '<p>An annotation that may occur at most once at a single program element and\nonly on certain program elements.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Cloneable.clone', 'type': 'attribute', 'url': 'Cloneable.type.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Cloneable', 'type': 'interface', 'url': 'Cloneable.type.html', 'doc': '<p>Abstract supertype of objects whose value can be\ncloned.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'AssertionException', 'type': 'class', 'url': 'AssertionException.type.html', 'doc': '<p>An exception that occurs when an assertion fails, that\nis, when a condition in an <code>assert</code> statement evaluates\nto false…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'mapPairs', 'type': 'function', 'url': 'index.html#mapPairs', 'doc': '<p>Given two streams, form a new stream by applying a\nfunction to the arguments in the given streams.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'plus', 'type': 'function', 'url': 'index.html#plus', 'doc': '<p>Add the given <code>Summable</code> values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Integer.character', 'type': 'value', 'url': 'Integer.type.html#character', 'doc': '<p>The UTF-32 character with this UCS code point.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Integer', 'type': 'class', 'url': 'Integer.type.html', 'doc': '<p>A 64-bit integer, or the closest approximation to a\n64-bit integer provided by the underlying platform</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'suppressedExceptions', 'type': 'function', 'url': 'index.html#suppressedExceptions', 'doc': '<p>Returns the exceptions that were suppressed (if any) during the handling of the given exception.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.sequence', 'type': 'value', 'url': 'SequenceBuilder.type.html#sequence', 'doc': '<p>The resulting sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.append', 'type': 'function', 'url': 'SequenceBuilder.type.html#append', 'doc': '<p>Append an element to the sequence and return this\n<code>SequenceBuilder</code></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.appendAll', 'type': 'function', 'url': 'SequenceBuilder.type.html#appendAll', 'doc': '<p>Append multiple elements to the sequence and return\nthis <code>SequenceBuilder</code></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.size', 'type': 'attribute', 'url': 'SequenceBuilder.type.html#size', 'doc': '<p>The size of the resulting sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder.empty', 'type': 'attribute', 'url': 'SequenceBuilder.type.html#empty', 'doc': '<p>Determine if the resulting sequence is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequenceBuilder', 'type': 'class', 'url': 'SequenceBuilder.type.html', 'doc': '<p>Since sequences are immutable, this class is used for\nconstructing a new sequence by incrementally appending\nelements…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'SequenceAppender.sequence', 'type': 'value', 'url': 'SequenceAppender.type.html#sequence', 'doc': '<p>The resulting nonempty sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'SequenceAppender', 'type': 'class', 'url': 'SequenceAppender.type.html', 'doc': '<p>This class is used for constructing a new nonempty\nsequence by incrementally appending elements to an\nexisting…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'every', 'type': 'function', 'url': 'index.html#every', 'doc': '<p>Determines if every one of the given boolean values\n(usually a comprehension) is <code>true</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Collection.empty', 'type': 'attribute', 'url': 'Collection.type.html#empty', 'doc': '<p>Determine if the collection is empty, that is, if\nit has no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Collection.contains', 'type': 'function', 'url': 'Collection.type.html#contains', 'doc': '<p>Return <code>true</code> if the given object is an element of\nthis collection.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Collection.string', 'type': 'attribute', 'url': 'Collection.type.html#string', 'doc': '<p>A string of form <code>"{ x, y, z }"</code> where <code>x</code>, <code>y</code>,\nand <code>z</code> are the <code>string</code> representations of the\nelements of this…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Collection', 'type': 'interface', 'url': 'Collection.type.html', 'doc': '<p>Represents an iterable collection of elements of finite\nsize.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'LazyList.lastIndex', 'type': 'attribute', 'url': 'LazyList.type.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.get', 'type': 'function', 'url': 'LazyList.type.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.rest', 'type': 'attribute', 'url': 'LazyList.type.html#rest', 'doc': '<p>Returns an iterable object containing all but the\nfirst element of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyList.iterator', 'type': 'function', 'url': 'LazyList.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.reversed', 'type': 'attribute', 'url': 'LazyList.type.html#reversed', 'doc': '<p>Returns a <code>List</code> with the elements of this <code>List</code>\nin reverse order.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.clone', 'type': 'attribute', 'url': 'LazyList.type.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.span', 'type': 'function', 'url': 'LazyList.type.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.spanTo', 'type': 'function', 'url': 'LazyList.type.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.spanFrom', 'type': 'function', 'url': 'LazyList.type.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.segment', 'type': 'function', 'url': 'LazyList.type.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.equals', 'type': 'function', 'url': 'LazyList.type.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.hash', 'type': 'attribute', 'url': 'LazyList.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyList.findLast', 'type': 'function', 'url': 'LazyList.type.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyList.first', 'type': 'attribute', 'url': 'LazyList.type.html#first', 'doc': '<p>The first element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyList.last', 'type': 'attribute', 'url': 'LazyList.type.html#last', 'doc': '<p>The last element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyList', 'type': 'class', 'url': 'LazyList.type.html', 'doc': '<p>An implementation of <code>List</code> that wraps an <code>Iterable</code> of\nelements.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Number.positive', 'type': 'value', 'url': 'Number.type.html#positive', 'doc': '<p>Determine if the number is positive.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.negative', 'type': 'value', 'url': 'Number.type.html#negative', 'doc': '<p>Determine if the number is negative.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.float', 'type': 'value', 'url': 'Number.type.html#float', 'doc': '<p>The number, represented as a <code>Float</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.integer', 'type': 'value', 'url': 'Number.type.html#integer', 'doc': '<p>The number, represented as an <code>Integer</code>, after\ntruncation of any fractional part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.magnitude', 'type': 'value', 'url': 'Number.type.html#magnitude', 'doc': '<p>The magnitude of the number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.sign', 'type': 'value', 'url': 'Number.type.html#sign', 'doc': '<p>The sign of this number.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.fractionalPart', 'type': 'value', 'url': 'Number.type.html#fractionalPart', 'doc': '<p>The fractional part of the number, after truncation\nof the integral part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number.wholePart', 'type': 'value', 'url': 'Number.type.html#wholePart', 'doc': '<p>The integral value of the number after truncation\nof the fractional part.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Number', 'type': 'interface', 'url': 'Number.type.html', 'doc': '<p>Abstraction of numbers.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Map.equals', 'type': 'function', 'url': 'Map.type.html#equals', 'doc': '<p>Two <code>Map</code>s are considered equal iff they have the\nsame <em>entry sets</em>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Map.hash', 'type': 'attribute', 'url': 'Map.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Map.keys', 'type': 'attribute', 'url': 'Map.type.html#keys', 'doc': '<p>Returns the set of keys contained in this <code>Map</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Map.values', 'type': 'attribute', 'url': 'Map.type.html#values', 'doc': '<p>Returns all the values stored in this <code>Map</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Map.inverse', 'type': 'attribute', 'url': 'Map.type.html#inverse', 'doc': '<p>Returns a <code>Map</code> in which every key is an <code>Item</code> in\nthis map, and every value is the set of keys that\nstored the `Item…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Map.mapItems', 'type': 'function', 'url': 'Map.type.html#mapItems', 'doc': '<p>Returns a <code>Map</code> with the same keys as this map.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Map', 'type': 'interface', 'url': 'Map.type.html', 'doc': '<p>Represents a collection which maps <em>keys</em> to <em>items</em>,\nwhere a key can map to at most one item.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'emptyMap.clone', 'type': 'attribute', 'url': 'emptyMap.object.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptyMap.iterator', 'type': 'function', 'url': 'emptyMap.object.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptyMap.get', 'type': 'function', 'url': 'emptyMap.object.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptyMap.keys', 'type': 'attribute', 'url': 'emptyMap.object.html#keys', 'doc': '<p>The <code>Category</code> of all keys for which a value is\ndefined by this <code>Correspondence</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.mapItems', 'type': 'function', 'url': 'emptyMap.object.html#mapItems', 'doc': '<p>Returns a <code>Map</code> with the same keys as this map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.inverse', 'type': 'attribute', 'url': 'emptyMap.object.html#inverse', 'doc': '<p>Returns a <code>Map</code> in which every key is an <code>Item</code> in\nthis map, and every value is the set of keys that\nstored the `Item…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.values', 'type': 'attribute', 'url': 'emptyMap.object.html#values', 'doc': '<p>Returns all the values stored in this <code>Map</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.size', 'type': 'value', 'url': 'emptyMap.object.html#size', 'doc': '<p>The number of elements returned by the iterator of\nthis iterable object, if the iterator terminates.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.empty', 'type': 'value', 'url': 'emptyMap.object.html#empty', 'doc': '<p>Determines if the iterable object is empty, that is\nto say, if the iterator returns no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.contains', 'type': 'function', 'url': 'emptyMap.object.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptyMap.containsAny', 'type': 'function', 'url': 'emptyMap.object.html#containsAny', 'doc': '<p>Determines if any one of the given values belongs\nto this <code>Category</code></p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.containsEvery', 'type': 'function', 'url': 'emptyMap.object.html#containsEvery', 'doc': '<p>Determines if every one of the given values belongs\nto this <code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.count', 'type': 'function', 'url': 'emptyMap.object.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.defines', 'type': 'function', 'url': 'emptyMap.object.html#defines', 'doc': '<p>Determines if there is a value defined for the\ngiven key.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.map', 'type': 'function', 'url': 'emptyMap.object.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.filter', 'type': 'function', 'url': 'emptyMap.object.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.fold', 'type': 'function', 'url': 'emptyMap.object.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.find', 'type': 'function', 'url': 'emptyMap.object.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.collect', 'type': 'function', 'url': 'emptyMap.object.html#collect', 'doc': '<p>A sequence containing the results of applying the\ngiven mapping to the elements of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.select', 'type': 'function', 'url': 'emptyMap.object.html#select', 'doc': '<p>A sequence containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.any', 'type': 'function', 'url': 'emptyMap.object.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.every', 'type': 'function', 'url': 'emptyMap.object.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.skipping', 'type': 'function', 'url': 'emptyMap.object.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.taking', 'type': 'function', 'url': 'emptyMap.object.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap.by', 'type': 'function', 'url': 'emptyMap.object.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptyMap', 'type': 'object', 'url': 'emptyMap.object.html', 'doc': '<p>A <a class=\'link\' href=\'Map.type.html\' title=\'Go to ceylon.language::Map\'>Map</a> with no entries.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'emptyMap', 'type': 'value', 'url': 'index.html#emptyMap', 'doc': '<p>A <a class=\'link\' href=\'Map.type.html\' title=\'Go to ceylon.language::Map\'>Map</a> with no entries.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ArraySequence.last', 'type': 'value', 'url': 'ArraySequence.type.html#last', 'doc': '<p>The last element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.first', 'type': 'value', 'url': 'ArraySequence.type.html#first', 'doc': '<p>The first element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.size', 'type': 'value', 'url': 'ArraySequence.type.html#size', 'doc': '<p>The number of elements returned by the iterator of\nthis iterable object, if the iterator terminates.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.lastIndex', 'type': 'value', 'url': 'ArraySequence.type.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.rest', 'type': 'value', 'url': 'ArraySequence.type.html#rest', 'doc': '<p>Returns an iterable object containing all but the\nfirst element of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.count', 'type': 'function', 'url': 'ArraySequence.type.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.contains', 'type': 'function', 'url': 'ArraySequence.type.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.clone', 'type': 'attribute', 'url': 'ArraySequence.type.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.get', 'type': 'function', 'url': 'ArraySequence.type.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.iterator', 'type': 'function', 'url': 'ArraySequence.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.defines', 'type': 'function', 'url': 'ArraySequence.type.html#defines', 'doc': '<p>Determines if there is a value defined for the\ngiven key.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ArraySequence.equals', 'type': 'function', 'url': 'ArraySequence.type.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.hash', 'type': 'attribute', 'url': 'ArraySequence.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.reversed', 'type': 'value', 'url': 'ArraySequence.type.html#reversed', 'doc': '<p>Reverse this list, returning a new list.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.span', 'type': 'function', 'url': 'ArraySequence.type.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.spanFrom', 'type': 'function', 'url': 'ArraySequence.type.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.spanTo', 'type': 'function', 'url': 'ArraySequence.type.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence.segment', 'type': 'function', 'url': 'ArraySequence.type.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ArraySequence', 'type': 'class', 'url': 'ArraySequence.type.html', 'doc': '<p>An immutable <code>Sequence</code> implemented using the platform\'s\nnative array type.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'count', 'type': 'function', 'url': 'index.html#count', 'doc': '<p>A count of the number of <code>true</code> items in the given values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'product', 'type': 'function', 'url': 'index.html#product', 'doc': '<p>Given a nonempty stream of <code>Numeric</code> values, return\nthe product of the values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstrainedAnnotation.occurs', 'type': 'function', 'url': 'ConstrainedAnnotation.type.html#occurs', 'doc': '<p>Can this annotation can occur on the given program\nelement?</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstrainedAnnotation', 'type': 'interface', 'url': 'ConstrainedAnnotation.type.html', 'doc': '<p>An annotation constrained to appear only on certain\nprogram elements, and only with certain values.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'printStackTrace', 'type': 'function', 'url': 'index.html#printStackTrace', 'doc': '<p>Print the stack trace of the given exception using\nthe given function, or to standard error if no\nfunction is…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SequencedAnnotation', 'type': 'interface', 'url': 'SequencedAnnotation.type.html', 'doc': '<p>An annotation that may occur multiple times at a single program element,\nand only on certain program elemenets.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Annotation', 'type': 'interface', 'url': 'Annotation.type.html', 'doc': '<p>The supertype of all <em>annotation classes</em>.</p>\n<h3>Annotation classes</h3>\n<p>An <em>annotation class</em> must satisfy <code>Annotation</code>,\n[…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'forItem', 'type': 'function', 'url': 'index.html#forItem', 'doc': '<p>A function that returns the result of the given <code>resulting()</code> function\non the item of a given <code>Entry</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.string', 'type': 'value', 'url': 'StringBuilder.type.html#string', 'doc': '<p>The resulting string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'StringBuilder.append', 'type': 'function', 'url': 'StringBuilder.type.html#append', 'doc': '<p>Append the characters in the given string.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendAll', 'type': 'function', 'url': 'StringBuilder.type.html#appendAll', 'doc': '<p>Append the characters in the given strings.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendCharacter', 'type': 'function', 'url': 'StringBuilder.type.html#appendCharacter', 'doc': '<p>Append the given character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendNewline', 'type': 'function', 'url': 'StringBuilder.type.html#appendNewline', 'doc': '<p>Append a newline character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.appendSpace', 'type': 'function', 'url': 'StringBuilder.type.html#appendSpace', 'doc': '<p>Append a space character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.reset', 'type': 'function', 'url': 'StringBuilder.type.html#reset', 'doc': '<p>Remove all content and return to initial state.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.insert', 'type': 'function', 'url': 'StringBuilder.type.html#insert', 'doc': '<p>Insert a <code>String</code> at the specified position.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.insertCharacter', 'type': 'function', 'url': 'StringBuilder.type.html#insertCharacter', 'doc': '<p>Insert a <code>Character</code> at the specified position.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.delete', 'type': 'function', 'url': 'StringBuilder.type.html#delete', 'doc': '<p>Deletes the specified number of characters from the\ncurrent content, starting at the specified position.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder.size', 'type': 'value', 'url': 'StringBuilder.type.html#size', 'doc': '<p>Returns the size of the current content.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StringBuilder', 'type': 'class', 'url': 'StringBuilder.type.html', 'doc': '<p>Since strings are immutable, this class is used for\nconstructing a string by incrementally appending\ncharacters to the…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Correspondence.get', 'type': 'function', 'url': 'Correspondence.type.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Correspondence.defines', 'type': 'function', 'url': 'Correspondence.type.html#defines', 'doc': '<p>Determines if there is a value defined for the\ngiven key.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.keys', 'type': 'attribute', 'url': 'Correspondence.type.html#keys', 'doc': '<p>The <code>Category</code> of all keys for which a value is\ndefined by this <code>Correspondence</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.definesEvery', 'type': 'function', 'url': 'Correspondence.type.html#definesEvery', 'doc': '<p>Determines if this <code>Correspondence</code> defines a value\nfor every one of the given keys.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.definesAny', 'type': 'function', 'url': 'Correspondence.type.html#definesAny', 'doc': '<p>Determines if this <code>Correspondence</code> defines a value\nfor any one of the given keys.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence.items', 'type': 'function', 'url': 'Correspondence.type.html#items', 'doc': '<p>Returns the items defined for the given keys, in\nthe same order as the corresponding keys.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Correspondence', 'type': 'interface', 'url': 'Correspondence.type.html', 'doc': '<p>Abstract supertype of objects which associate values\nwith keys.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'parseBoolean', 'type': 'function', 'url': 'index.html#parseBoolean', 'doc': '<p>The <code>Boolean</code> value of the given string representation of a boolean value,\nor <code>null</code> if the string does not represent a…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'sort', 'type': 'function', 'url': 'index.html#sort', 'doc': '<p>Sort the given elements, returning a new sequence.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Array.set', 'type': 'function', 'url': 'Array.type.html#set', 'doc': '<p>Replace the existing element at the specified index\nwith the given element.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Array.reversed', 'type': 'value', 'url': 'Array.type.html#reversed', 'doc': '<p>Reverse this array, returning a new array.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Array.rest', 'type': 'value', 'url': 'Array.type.html#rest', 'doc': '<p>The rest of the array, without the first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Array.copyTo', 'type': 'function', 'url': 'Array.type.html#copyTo', 'doc': '<p>Efficiently copy the elements in the segment\n<code>sourcePosition:length</code> of this array to the segment\n`…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Array', 'type': 'class', 'url': 'Array.type.html', 'doc': '<p>A fixed-size array of elements.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'arrayOfSize', 'type': 'function', 'url': 'index.html#arrayOfSize', 'doc': '<p>Create an array of the specified size, populating every\nindex with the given element.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'equalTo', 'type': 'function', 'url': 'index.html#equalTo', 'doc': '<p>Returns a partial function that will compare an element\nto any other element and returns true if they\'re equal.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Closeable.open', 'type': 'function', 'url': 'Closeable.type.html#open', 'doc': '<p>Called before entry to a <code>try</code> block.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Closeable.close', 'type': 'function', 'url': 'Closeable.type.html#close', 'doc': '<p>Called after completion of a <code>try</code> block.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Closeable', 'type': 'interface', 'url': 'Closeable.type.html', 'doc': '<p>Abstract supertype of types which may appear\nas the expression type of a resource expression\nin a <code>try</code> statement.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Iterable.iterator', 'type': 'function', 'url': 'Iterable.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Iterable.empty', 'type': 'attribute', 'url': 'Iterable.type.html#empty', 'doc': '<p>Determines if the iterable object is empty, that is\nto say, if the iterator returns no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.size', 'type': 'attribute', 'url': 'Iterable.type.html#size', 'doc': '<p>The number of elements returned by the iterator of\nthis iterable object, if the iterator terminates.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.longerThan', 'type': 'function', 'url': 'Iterable.type.html#longerThan', 'doc': '<p>Determines if this iterable object has more elements\nthan the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.shorterThan', 'type': 'function', 'url': 'Iterable.type.html#shorterThan', 'doc': '<p>Determines if this iterable object has fewer elements\nthan the given length.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.contains', 'type': 'function', 'url': 'Iterable.type.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Iterable.first', 'type': 'attribute', 'url': 'Iterable.type.html#first', 'doc': '<p>The first element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.last', 'type': 'attribute', 'url': 'Iterable.type.html#last', 'doc': '<p>The last element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.rest', 'type': 'attribute', 'url': 'Iterable.type.html#rest', 'doc': '<p>Returns an iterable object containing all but the\nfirst element of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.sequence', 'type': 'attribute', 'url': 'Iterable.type.html#sequence', 'doc': '<p>A sequence containing the elements returned by the\niterator.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.map', 'type': 'function', 'url': 'Iterable.type.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.filter', 'type': 'function', 'url': 'Iterable.type.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.fold', 'type': 'function', 'url': 'Iterable.type.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.find', 'type': 'function', 'url': 'Iterable.type.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.findLast', 'type': 'function', 'url': 'Iterable.type.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.sort', 'type': 'function', 'url': 'Iterable.type.html#sort', 'doc': '<p>A sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order upon the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.collect', 'type': 'function', 'url': 'Iterable.type.html#collect', 'doc': '<p>A sequence containing the results of applying the\ngiven mapping to the elements of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.select', 'type': 'function', 'url': 'Iterable.type.html#select', 'doc': '<p>A sequence containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.any', 'type': 'function', 'url': 'Iterable.type.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.every', 'type': 'function', 'url': 'Iterable.type.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.skipping', 'type': 'function', 'url': 'Iterable.type.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.taking', 'type': 'function', 'url': 'Iterable.type.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.skippingWhile', 'type': 'function', 'url': 'Iterable.type.html#skippingWhile', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the leading\nelements until the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.takingWhile', 'type': 'function', 'url': 'Iterable.type.html#takingWhile', 'doc': '<p>Produce an <code>Iterable</code> containing the leading elements\nof this iterable object until the given predicate\nfunction…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.by', 'type': 'function', 'url': 'Iterable.type.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.count', 'type': 'function', 'url': 'Iterable.type.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.coalesced', 'type': 'attribute', 'url': 'Iterable.type.html#coalesced', 'doc': '<p>The non-null elements of this <code>Iterable</code>, in their\noriginal order.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.indexed', 'type': 'attribute', 'url': 'Iterable.type.html#indexed', 'doc': '<p>All entries of form <code>index-&gt;element</code> where <code>index</code>\nis the position at which <code>element</code> occurs, for every\nnon-null…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.following', 'type': 'function', 'url': 'Iterable.type.html#following', 'doc': '<p>An <code>Iterable</code> with the given inital element followed\nby the elements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.chain', 'type': 'function', 'url': 'Iterable.type.html#chain', 'doc': '<p>The elements of this iterable object, in their\noriginal order, followed by the elements of the\ngiven iterable object…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.defaultNullElements', 'type': 'function', 'url': 'Iterable.type.html#defaultNullElements', 'doc': '<p>An <code>Iterable</code> that produces the elements of this\niterable object, replacing every <code>null</code> element\nwith the given…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.string', 'type': 'attribute', 'url': 'Iterable.type.html#string', 'doc': '<p>A string of form <code>"{ x, y, z }"</code> where <code>x</code>, <code>y</code>,\nand <code>z</code> are the <code>string</code> representations of the\nelements of this…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Iterable.cycled', 'type': 'attribute', 'url': 'Iterable.type.html#cycled', 'doc': '<p>A non-finite iterable object that produces the elements\nof this iterable object, repeatedly.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.cycle', 'type': 'function', 'url': 'Iterable.type.html#cycle', 'doc': '<p>A finite iterable object that produces the elements of\nthis iterable object, repeatedly, the given number of\ntimes.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable.repeat', 'type': 'function', 'url': 'Iterable.type.html#repeat', 'doc': '<p>Returns a list formed by repeating the elements of this\niterable object the given number of times, or an empty\nlist if…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Iterable', 'type': 'interface', 'url': 'Iterable.type.html', 'doc': '<p>Abstract supertype of categories whose elements may be\niterated.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Character.string', 'type': 'value', 'url': 'Character.type.html#string', 'doc': '<p>A string containg just this character.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Character.lowercased', 'type': 'value', 'url': 'Character.type.html#lowercased', 'doc': '<p>The lowercase representation of this character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.uppercased', 'type': 'value', 'url': 'Character.type.html#uppercased', 'doc': '<p>The uppercase representation of this character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.titlecased', 'type': 'value', 'url': 'Character.type.html#titlecased', 'doc': '<p>The title case representation of this character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.lowercase', 'type': 'value', 'url': 'Character.type.html#lowercase', 'doc': '<p>Determine if this is a lowercase representation of\nthe character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.uppercase', 'type': 'value', 'url': 'Character.type.html#uppercase', 'doc': '<p>Determine if this is an uppercase representation of\nthe character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.titlecase', 'type': 'value', 'url': 'Character.type.html#titlecase', 'doc': '<p>Determine if this is a title case representation of\nthe character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.digit', 'type': 'value', 'url': 'Character.type.html#digit', 'doc': '<p>Determine if this character is a numeric digit.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.letter', 'type': 'value', 'url': 'Character.type.html#letter', 'doc': '<p>Determine if this character is a letter.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.whitespace', 'type': 'value', 'url': 'Character.type.html#whitespace', 'doc': '<p>Determine if this character is a whitespace character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.control', 'type': 'value', 'url': 'Character.type.html#control', 'doc': '<p>Determine if this character is an ISO control\ncharacter.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character.integer', 'type': 'value', 'url': 'Character.type.html#integer', 'doc': '<p>The code point of the character.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Character', 'type': 'class', 'url': 'Character.type.html', 'doc': '<p>A 32-bit Unicode character.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'byItem', 'type': 'function', 'url': 'index.html#byItem', 'doc': '<p>A comparator for <code>Entry</code>s which compares their items\naccording to the given <code>comparing()</code> function.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'coalesce', 'type': 'function', 'url': 'index.html#coalesce', 'doc': '<p>Return a sequence containing the given values which are\nnot null.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Null', 'type': 'class', 'url': 'Null.type.html', 'doc': '<p>The type of the <code>null</code> value.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'null', 'type': 'object', 'url': 'null.object.html', 'doc': '<p>The null value.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'null', 'type': 'value', 'url': 'index.html#null', 'doc': '<p>The null value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Set.superset', 'type': 'function', 'url': 'Set.type.html#superset', 'doc': '<p>Determines if this <code>Set</code> is a superset of the\nspecified Set, that is, if this <code>Set</code> contains all\nof the elements in…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Set.subset', 'type': 'function', 'url': 'Set.type.html#subset', 'doc': '<p>Determines if this <code>Set</code> is a subset of the given\n<code>Set</code>, that is, if the given set contains all of\nthe elements in…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Set.equals', 'type': 'function', 'url': 'Set.type.html#equals', 'doc': '<p>Two <code>Set</code>s are considered equal if they have the\nsame size and if every element of the first set is\nalso an element of…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Set.hash', 'type': 'attribute', 'url': 'Set.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Set.union', 'type': 'function', 'url': 'Set.type.html#union', 'doc': '<p>Returns a new <code>Set</code> containing all the elements of\nthis <code>Set</code> and all the elements of the given <code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set.intersection', 'type': 'function', 'url': 'Set.type.html#intersection', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\nthat are present in both this <code>Set</code> and the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set.exclusiveUnion', 'type': 'function', 'url': 'Set.type.html#exclusiveUnion', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\ncontained in either this <code>Set</code> or the given <code>Set</code>,\nbut no element…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set.complement', 'type': 'function', 'url': 'Set.type.html#complement', 'doc': '<p>Returns a new <code>Set</code> containing all the elements in\nthis <code>Set</code> that are not contained in the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Set', 'type': 'interface', 'url': 'Set.type.html', 'doc': '<p>A collection of unique elements.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'emptySet.union', 'type': 'function', 'url': 'emptySet.object.html#union', 'doc': '<p>Returns a new <code>Set</code> containing all the elements of\nthis <code>Set</code> and all the elements of the given <code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptySet.intersection', 'type': 'function', 'url': 'emptySet.object.html#intersection', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\nthat are present in both this <code>Set</code> and the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptySet.exclusiveUnion', 'type': 'function', 'url': 'emptySet.object.html#exclusiveUnion', 'doc': '<p>Returns a new <code>Set</code> containing only the elements\ncontained in either this <code>Set</code> or the given <code>Set</code>,\nbut no element…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptySet.complement', 'type': 'function', 'url': 'emptySet.object.html#complement', 'doc': '<p>Returns a new <code>Set</code> containing all the elements in\nthis <code>Set</code> that are not contained in the given\n<code>Set</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptySet.clone', 'type': 'attribute', 'url': 'emptySet.object.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptySet.iterator', 'type': 'function', 'url': 'emptySet.object.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptySet.subset', 'type': 'function', 'url': 'emptySet.object.html#subset', 'doc': '<p>Determines if this <code>Set</code> is a subset of the given\n<code>Set</code>, that is, if the given set contains all of\nthe elements in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.superset', 'type': 'function', 'url': 'emptySet.object.html#superset', 'doc': '<p>Determines if this <code>Set</code> is a superset of the\nspecified Set, that is, if this <code>Set</code> contains all\nof the elements in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.size', 'type': 'value', 'url': 'emptySet.object.html#size', 'doc': '<p>The number of elements returned by the iterator of\nthis iterable object, if the iterator terminates.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.empty', 'type': 'value', 'url': 'emptySet.object.html#empty', 'doc': '<p>Determines if the iterable object is empty, that is\nto say, if the iterator returns no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.contains', 'type': 'function', 'url': 'emptySet.object.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'emptySet.containsAny', 'type': 'function', 'url': 'emptySet.object.html#containsAny', 'doc': '<p>Determines if any one of the given values belongs\nto this <code>Category</code></p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.containsEvery', 'type': 'function', 'url': 'emptySet.object.html#containsEvery', 'doc': '<p>Determines if every one of the given values belongs\nto this <code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.count', 'type': 'function', 'url': 'emptySet.object.html#count', 'doc': '<p>Return the number of elements in this <code>Iterable</code>\nthat satisfy the predicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.map', 'type': 'function', 'url': 'emptySet.object.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.filter', 'type': 'function', 'url': 'emptySet.object.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.fold', 'type': 'function', 'url': 'emptySet.object.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.find', 'type': 'function', 'url': 'emptySet.object.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.collect', 'type': 'function', 'url': 'emptySet.object.html#collect', 'doc': '<p>A sequence containing the results of applying the\ngiven mapping to the elements of this container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.select', 'type': 'function', 'url': 'emptySet.object.html#select', 'doc': '<p>A sequence containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.any', 'type': 'function', 'url': 'emptySet.object.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.every', 'type': 'function', 'url': 'emptySet.object.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.skipping', 'type': 'function', 'url': 'emptySet.object.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.taking', 'type': 'function', 'url': 'emptySet.object.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet.by', 'type': 'function', 'url': 'emptySet.object.html#by', 'doc': '<p>Produce an <code>Iterable</code> containing every <code>step</code>th\nelement of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'emptySet', 'type': 'object', 'url': 'emptySet.object.html', 'doc': '<p>A <a class=\'link\' href=\'Set.type.html\' title=\'Go to ceylon.language::Set\'>Set</a> with no elements.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'emptySet', 'type': 'value', 'url': 'index.html#emptySet', 'doc': '<p>A <a class=\'link\' href=\'Set.type.html\' title=\'Go to ceylon.language::Set\'>Set</a> with no elements.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Exponentiable.power', 'type': 'function', 'url': 'Exponentiable.type.html#power', 'doc': '<p>The result of raising this number to the given\npower.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Exponentiable', 'type': 'interface', 'url': 'Exponentiable.type.html', 'doc': '<p>Abstraction of <a class=\'link-custom-text\' href=\'Numeric.type.html\' title=\'Go to ceylon.language::Numeric\'>numeric types</a> that may be\nraised to a power <code>x^p</code>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'times', 'type': 'function', 'url': 'index.html#times', 'doc': '<p>Multiply the given <code>Numeric</code> values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'OverflowException', 'type': 'class', 'url': 'OverflowException.type.html', 'doc': '<p>Thrown when a mathematical operation caused a number to\noverflow from its bounds.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Singleton.lastIndex', 'type': 'attribute', 'url': 'Singleton.type.html#lastIndex', 'doc': '<p>Returns <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.size', 'type': 'attribute', 'url': 'Singleton.type.html#size', 'doc': '<p>Returns <code>1</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.first', 'type': 'attribute', 'url': 'Singleton.type.html#first', 'doc': '<p>Returns the element contained in this <code>Singleton</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.last', 'type': 'attribute', 'url': 'Singleton.type.html#last', 'doc': '<p>Returns the element contained in this <code>Singleton</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.rest', 'type': 'attribute', 'url': 'Singleton.type.html#rest', 'doc': '<p>Returns <code>Empty</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.get', 'type': 'function', 'url': 'Singleton.type.html#get', 'doc': '<p>Returns the contained element, if the specified\nindex is <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.clone', 'type': 'attribute', 'url': 'Singleton.type.html#clone', 'doc': '<p>Returns a <code>Singleton</code> with the same element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.iterator', 'type': 'function', 'url': 'Singleton.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.string', 'type': 'attribute', 'url': 'Singleton.type.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.segment', 'type': 'function', 'url': 'Singleton.type.html#segment', 'doc': '<p>Returns a <code>Singleton</code> if the given starting index\nis <code>0</code> and the given <code>length</code> is greater than <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.span', 'type': 'function', 'url': 'Singleton.type.html#span', 'doc': '<p>Returns a <code>Singleton</code> if the given starting index\nis <code>0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.spanTo', 'type': 'function', 'url': 'Singleton.type.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.spanFrom', 'type': 'function', 'url': 'Singleton.type.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.reversed', 'type': 'attribute', 'url': 'Singleton.type.html#reversed', 'doc': '<p>Return this singleton.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.equals', 'type': 'function', 'url': 'Singleton.type.html#equals', 'doc': '<p>A <code>Singleton</code> can be equal to another <code>List</code> if\nthat <code>List</code> has only one element which is equal to\nthis <code>Singleton</code>\'s…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.hash', 'type': 'attribute', 'url': 'Singleton.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.contains', 'type': 'function', 'url': 'Singleton.type.html#contains', 'doc': '<p>Returns <code>true</code> if the specified element is this\n<code>Singleton</code>\'s element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Singleton.count', 'type': 'function', 'url': 'Singleton.type.html#count', 'doc': '<p>Returns <code>1</code> if this <code>Singleton</code>\'s element\nsatisfies the predicate, or <code>0</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.map', 'type': 'function', 'url': 'Singleton.type.html#map', 'doc': '<p>An <code>Iterable</code> containing the results of applying\nthe given mapping to the elements of to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.filter', 'type': 'function', 'url': 'Singleton.type.html#filter', 'doc': '<p>An <code>Iterable</code> containing the elements of this\ncontainer that satisfy the given predicate.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.fold', 'type': 'function', 'url': 'Singleton.type.html#fold', 'doc': '<p>The result of applying the accumulating function to\neach element of this container in turn.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.find', 'type': 'function', 'url': 'Singleton.type.html#find', 'doc': '<p>The first element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.findLast', 'type': 'function', 'url': 'Singleton.type.html#findLast', 'doc': '<p>The last element which satisfies the given\npredicate, if any, or <code>null</code> otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.sort', 'type': 'function', 'url': 'Singleton.type.html#sort', 'doc': '<p>A sequence containing the elements of this\ncontainer, sorted according to a function\nimposing a partial order upon the…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.any', 'type': 'function', 'url': 'Singleton.type.html#any', 'doc': '<p>Return <code>true</code> if at least one element satisfies the\npredicate function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.every', 'type': 'function', 'url': 'Singleton.type.html#every', 'doc': '<p>Return <code>true</code> if all elements satisfy the predicate\nfunction.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.skipping', 'type': 'function', 'url': 'Singleton.type.html#skipping', 'doc': '<p>Produce an <code>Iterable</code> containing the elements of\nthis iterable object, after skipping the first\n<code>skip</code> elements.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.taking', 'type': 'function', 'url': 'Singleton.type.html#taking', 'doc': '<p>Produce an <code>Iterable</code> containing the first <code>take</code>\nelements of this iterable object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton.coalesced', 'type': 'attribute', 'url': 'Singleton.type.html#coalesced', 'doc': '<p>Returns the Singleton itself, or empty</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Singleton', 'type': 'class', 'url': 'Singleton.type.html', 'doc': '<p>A sequence with exactly one element, which may be null.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'runtime.name', 'type': 'value', 'url': 'runtime.object.html#name', 'doc': '<p>Returns the name of the runtime / virtual machine this process is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'runtime.version', 'type': 'value', 'url': 'runtime.object.html#version', 'doc': '<p>Returns the version of the runtime / virtual machine this process is running on.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'runtime.integerSize', 'type': 'value', 'url': 'runtime.object.html#integerSize', 'doc': '<p>The number of bits used to represent the value of an <code>Integer</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'runtime.minIntegerValue', 'type': 'value', 'url': 'runtime.object.html#minIntegerValue', 'doc': '<p>The minimum <code>Integer</code> value that can be represented by the runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'runtime.maxIntegerValue', 'type': 'value', 'url': 'runtime.object.html#maxIntegerValue', 'doc': '<p>The maximum <code>Integer</code> value that can be represented by the runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'runtime.string', 'type': 'value', 'url': 'runtime.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'runtime', 'type': 'object', 'url': 'runtime.object.html', 'doc': '<p>Machine (Virtual or not) on which the current process is running.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'runtime', 'type': 'value', 'url': 'index.html#runtime', 'doc': '<p>Machine (Virtual or not) on which the current process is running.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.lowercased', 'type': 'value', 'url': 'String.type.html#lowercased', 'doc': '<p>This string, with all characters in lowercase.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.uppercased', 'type': 'value', 'url': 'String.type.html#uppercased', 'doc': '<p>This string, with all characters in uppercase.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.split', 'type': 'function', 'url': 'String.type.html#split', 'doc': '<p>Split the string into tokens, using the given\npredicate to determine which characters are\nseparator characters.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.rest', 'type': 'value', 'url': 'String.type.html#rest', 'doc': '<p>The rest of the string, without the first element.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.join', 'type': 'function', 'url': 'String.type.html#join', 'doc': '<p>Join the given strings, using this string as a\nseparator.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.lines', 'type': 'attribute', 'url': 'String.type.html#lines', 'doc': '<p>Split the string into lines of text.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.trimmed', 'type': 'attribute', 'url': 'String.type.html#trimmed', 'doc': '<p>This string, after discarding\n<a class=\'link-custom-text\' href=\'Character.type.html#whitespace\' title=\'Go to ceylon.language::Character.whitespace\'>whitespace</a> from the\nbeginning and end of the string.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.trim', 'type': 'function', 'url': 'String.type.html#trim', 'doc': '<p>This string, after discarding the given\ncharacters from the beginning and end\nof the string</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.trimLeading', 'type': 'function', 'url': 'String.type.html#trimLeading', 'doc': '<p>This string, after discarding the given\ncharacters from the beginning of the string</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.trimTrailing', 'type': 'function', 'url': 'String.type.html#trimTrailing', 'doc': '<p>This string, after discarding the given\ncharacters from the end of the string</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.normalized', 'type': 'value', 'url': 'String.type.html#normalized', 'doc': '<p>This string, after collapsing strings of\n<a class=\'link-custom-text\' href=\'Character.type.html#whitespace\' title=\'Go to ceylon.language::Character.whitespace\'>whitespace</a>\ninto single space characters and…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.reversed', 'type': 'value', 'url': 'String.type.html#reversed', 'doc': '<p>This string, with the characters in reverse order.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.span', 'type': 'function', 'url': 'String.type.html#span', 'doc': '<p>Select the characters between the given indexes.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.spanFrom', 'type': 'function', 'url': 'String.type.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.spanTo', 'type': 'function', 'url': 'String.type.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.segment', 'type': 'function', 'url': 'String.type.html#segment', 'doc': '<p>Select the characters of this string beginning at\nthe given index, returning a string no longer than\nthe given length…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.initial', 'type': 'function', 'url': 'String.type.html#initial', 'doc': '<p>Select the first characters of this string,\nreturning a string no longer than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.terminal', 'type': 'function', 'url': 'String.type.html#terminal', 'doc': '<p>Select the last characters of the string,\nreturning a string no longer than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.size', 'type': 'value', 'url': 'String.type.html#size', 'doc': '<p>The length of the string (the number of characters\nit contains).</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.lastIndex', 'type': 'attribute', 'url': 'String.type.html#lastIndex', 'doc': '<p>The index of the last character in the string, or\n<code>null</code> if the string has no characters.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.iterator', 'type': 'function', 'url': 'String.type.html#iterator', 'doc': '<p>An iterator for the characters of the string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.get', 'type': 'function', 'url': 'String.type.html#get', 'doc': '<p>Returns the character at the given index in the\nstring, or <code>null</code> if the index is past the end of\nstring.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.contains', 'type': 'function', 'url': 'String.type.html#contains', 'doc': '<p>Determines if the given object is a <code>String</code> and,\nif so, if it occurs as a substring of this string,\nor if the object…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.plus', 'type': 'function', 'url': 'String.type.html#plus', 'doc': '<p>Returns the concatenation of this string with the\ngiven string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.repeat', 'type': 'function', 'url': 'String.type.html#repeat', 'doc': '<p>Returns a string formed by repeating this string\nthe given number of times, or the empty string if\n<code>times&lt;=0</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.replace', 'type': 'function', 'url': 'String.type.html#replace', 'doc': '<p>Returns a string formed by replacing every\noccurrence in this string of the given substring\nwith the given replacement…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'String.compare', 'type': 'function', 'url': 'String.type.html#compare', 'doc': '<p>Compare this string with the given string\nlexicographically, according to the Unicode values\nof the characters.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.longerThan', 'type': 'function', 'url': 'String.type.html#longerThan', 'doc': '<p>Determines if this string is longer than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.shorterThan', 'type': 'function', 'url': 'String.type.html#shorterThan', 'doc': '<p>Determines if this string is shorter than the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.equals', 'type': 'function', 'url': 'String.type.html#equals', 'doc': '<p>Determines if the given object is a string, and if\nso, if this string has the same length, and the\nsame characters, in…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.hash', 'type': 'value', 'url': 'String.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'String.string', 'type': 'attribute', 'url': 'String.type.html#string', 'doc': '<p>Returns the string itself.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.empty', 'type': 'value', 'url': 'String.type.html#empty', 'doc': '<p>Determines if this string has no characters, that\nis, if it has zero <code>size</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String.coalesced', 'type': 'attribute', 'url': 'String.type.html#coalesced', 'doc': '<p>Returns this string.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'String', 'type': 'class', 'url': 'String.type.html', 'doc': '<p>A string of characters.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Tuple.get', 'type': 'function', 'url': 'Tuple.type.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.lastIndex', 'type': 'attribute', 'url': 'Tuple.type.html#lastIndex', 'doc': '<p>The index of the last element of the list, or\nnull if the list is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.last', 'type': 'attribute', 'url': 'Tuple.type.html#last', 'doc': '<p>The last element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Tuple.segment', 'type': 'function', 'url': 'Tuple.type.html#segment', 'doc': '<p>Obtain a segment containing the mapped values\nstarting from the given index, with the given\nlength.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.span', 'type': 'function', 'url': 'Tuple.type.html#span', 'doc': '<p>Obtain a span containing the mapped values between\nthe two given indices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.iterator', 'type': 'function', 'url': 'Tuple.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.contains', 'type': 'function', 'url': 'Tuple.type.html#contains', 'doc': '<p>Determines if the given value belongs to this\n<code>Category</code>, that is, if it is an element of this\n<code>Category</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.withLeading', 'type': 'function', 'url': 'Tuple.type.html#withLeading', 'doc': '<p>Returns a new tuple that starts with the specified\nelement, followed by the elements of this tuple.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Tuple.size', 'type': 'value', 'url': 'Tuple.type.html#size', 'doc': '<p>The number of elements returned by the iterator of\nthis iterable object, if the iterator terminates.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'Tuple.spanTo', 'type': 'function', 'url': 'Tuple.type.html#spanTo', 'doc': '<p>Obtain a span containing the mapped values between\nthe start of the receiver and the end index.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.spanFrom', 'type': 'function', 'url': 'Tuple.type.html#spanFrom', 'doc': '<p>Obtain a span containing the mapped values between\nthe starting index and the end of the receiver.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.clone', 'type': 'value', 'url': 'Tuple.type.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple.reversed', 'type': 'value', 'url': 'Tuple.type.html#reversed', 'doc': '<p>Reverse this list, returning a new list.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Tuple', 'type': 'class', 'url': 'Tuple.type.html', 'doc': '<p>A <em>tuple</em> is a typed linked list.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'LazyMap.first', 'type': 'attribute', 'url': 'LazyMap.type.html#first', 'doc': '<p>The first element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyMap.last', 'type': 'attribute', 'url': 'LazyMap.type.html#last', 'doc': '<p>The last element returned by the iterator, if any,\nof <code>null</code> if the iterable object is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyMap.clone', 'type': 'attribute', 'url': 'LazyMap.type.html#clone', 'doc': '<p>Obtain a clone of this object.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.size', 'type': 'attribute', 'url': 'LazyMap.type.html#size', 'doc': '<p>The number of elements returned by the iterator of\nthis iterable object, if the iterator terminates.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'LazyMap.get', 'type': 'function', 'url': 'LazyMap.type.html#get', 'doc': '<p>Returns the value defined for the given key, or\n<code>null</code> if there is no value defined for the given\nkey.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.iterator', 'type': 'function', 'url': 'LazyMap.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this\ncontainer.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.equals', 'type': 'function', 'url': 'LazyMap.type.html#equals', 'doc': '<p>Determine if two values are equal.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap.hash', 'type': 'attribute', 'url': 'LazyMap.type.html#hash', 'doc': '<p>The hash value of the value, which allows the value\nto be an element of a hash-based set or key of a\nhash-based map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'LazyMap', 'type': 'class', 'url': 'LazyMap.type.html', 'doc': '<p>A <code>Map</code> implementation that wraps an <code>Iterable</code> of\nentries.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ceylon.language.meta', 'type': 'package', 'url': 'meta/index.html', 'doc': '<p>The Ceylon metamodel base package.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'optionalAnnotation', 'type': 'function', 'url': 'meta/index.html#optionalAnnotation', 'doc': '<p>The value of given optional annotation type on the given program element,\nor null if the program element was not…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'annotations', 'type': 'function', 'url': 'meta/index.html#annotations', 'doc': '<p>The annotations of the given type on the given program element.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'type', 'type': 'function', 'url': 'meta/index.html#type', 'doc': '<p>Returns the closed type and model of a given instance.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'typeLiteral', 'type': 'function', 'url': 'meta/index.html#typeLiteral', 'doc': '<p>Functional equivalent to type literals.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'modules.list', 'type': 'value', 'url': 'meta/modules.object.html#list', 'doc': '<p>Returns the list of all currently loaded modules.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'modules.find', 'type': 'function', 'url': 'meta/modules.object.html#find', 'doc': '<p>Finds a module by name and version, returns <code>null</code> if not found.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'modules.default', 'type': 'value', 'url': 'meta/modules.object.html#default', 'doc': '<p>Returns the default module, if there is one.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'modules', 'type': 'object', 'url': 'meta/modules.object.html', 'doc': '<p>Represents the list of Ceylon modules currently loaded at runtime.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'modules', 'type': 'value', 'url': 'meta/index.html#modules', 'doc': '<p>Represents the list of Ceylon modules currently loaded at runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'sequencedAnnotations', 'type': 'function', 'url': 'meta/index.html#sequencedAnnotations', 'doc': '<p>The values of given sequenced annotation type on the given program element,\nor empty if the program element was not…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ceylon.language.meta.declaration', 'type': 'package', 'url': 'meta/declaration/index.html', 'doc': '<p>The Ceylon metamodel open type and declaration package.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'OpenIntersection.satisfiedTypes', 'type': 'value', 'url': 'meta/declaration/OpenIntersection.type.html#satisfiedTypes', 'doc': '<p>This intersection\'s list of satisfied open types.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'OpenIntersection', 'type': 'interface', 'url': 'meta/declaration/OpenIntersection.type.html', 'doc': '<p>An open intersection type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'InterfaceDeclaration.interfaceApply', 'type': 'function', 'url': 'meta/declaration/InterfaceDeclaration.type.html#interfaceApply', 'doc': '<p>Applies the given closed type arguments to this toplevel interface declaration in order to obtain an interface model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'InterfaceDeclaration.memberInterfaceApply', 'type': 'function', 'url': 'meta/declaration/InterfaceDeclaration.type.html#memberInterfaceApply', 'doc': '<p>Applies the given closed container type and type arguments to this member interface declaration in order to obtain a…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'InterfaceDeclaration', 'type': 'interface', 'url': 'meta/declaration/InterfaceDeclaration.type.html', 'doc': '<p>An interface declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'SetterDeclaration.variable', 'type': 'value', 'url': 'meta/declaration/SetterDeclaration.type.html#variable', 'doc': '<p>The variable value this setter is for.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SetterDeclaration', 'type': 'interface', 'url': 'meta/declaration/SetterDeclaration.type.html', 'doc': '<p>A setter declaration for a variable <code>ValueDeclaration</code>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'GenericDeclaration.typeParameterDeclarations', 'type': 'value', 'url': 'meta/declaration/GenericDeclaration.type.html#typeParameterDeclarations', 'doc': '<p>The list of type parameters declared on this generic declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GenericDeclaration.getTypeParameterDeclaration', 'type': 'function', 'url': 'meta/declaration/GenericDeclaration.type.html#getTypeParameterDeclaration', 'doc': '<p>Finds a type parameter by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GenericDeclaration', 'type': 'interface', 'url': 'meta/declaration/GenericDeclaration.type.html', 'doc': '<p>A declaration that can have type parameters.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'OpenUnion.caseTypes', 'type': 'value', 'url': 'meta/declaration/OpenUnion.type.html#caseTypes', 'doc': '<p>The list of case types for this open union type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'OpenUnion', 'type': 'interface', 'url': 'meta/declaration/OpenUnion.type.html', 'doc': '<p>An open union type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'TypedDeclaration.openType', 'type': 'value', 'url': 'meta/declaration/TypedDeclaration.type.html#openType', 'doc': '<p>The open type for this declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'TypedDeclaration', 'type': 'interface', 'url': 'meta/declaration/TypedDeclaration.type.html', 'doc': '<p>Declaration which has an open type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'NestableDeclaration.actual', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#actual', 'doc': '<p>True if this declaration is annotated with <a class=\'link-custom-text\' href=\'index.html#actual\' title=\'Go to ceylon.language::actual\'>actual</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration.formal', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#formal', 'doc': '<p>True if this declaration is annotated with <a class=\'link-custom-text\' href=\'index.html#formal\' title=\'Go to ceylon.language::formal\'>formal</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration.default', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#default', 'doc': '<p>True if this declaration is annotated with <a class=\'link-custom-text\' href=\'index.html#default\' title=\'Go to ceylon.language::default\'>default</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration.shared', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#shared', 'doc': '<p>True if this declaration is annotated with <a class=\'link-custom-text\' href=\'index.html#shared\' title=\'Go to ceylon.language::shared\'>shared</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration.containingPackage', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#containingPackage', 'doc': '<p>This declaration\'s package container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration.containingModule', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#containingModule', 'doc': '<p>This declaration\'s module container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration.container', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#container', 'doc': '<p>This declaration\'s immediate container, which can be either a <a class=\'link\' href=\'meta/declaration/NestableDeclaration.type.html\' title=\'Go to ceylon.language.meta.declaration::NestableDeclaration\'>NestableDeclaration</a>\nor a <a class=\'link\' href=\'meta/declaration/Package.type.html\' title=\'Go to ceylon.language.meta.declaration::Package\'>Package</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration.toplevel', 'type': 'value', 'url': 'meta/declaration/NestableDeclaration.type.html#toplevel', 'doc': '<p>True if this declaration is a toplevel declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'NestableDeclaration', 'type': 'interface', 'url': 'meta/declaration/NestableDeclaration.type.html', 'doc': '<p>A declaration which can be contained in a <a class=\'link\' href=\'meta/declaration/Package.type.html\' title=\'Go to ceylon.language.meta.declaration::Package\'>Package</a> or in another <a class=\'link\' href=\'meta/declaration/NestableDeclaration.type.html\' title=\'Go to ceylon.language.meta.declaration::NestableDeclaration\'>NestableDeclaration</a>.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'FunctionDeclaration.apply', 'type': 'function', 'url': 'meta/declaration/FunctionDeclaration.type.html#apply', 'doc': '<p>Applies the given closed type arguments to this function declaration in order to obtain a function model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionDeclaration.memberApply', 'type': 'function', 'url': 'meta/declaration/FunctionDeclaration.type.html#memberApply', 'doc': '<p>Applies the given closed container type and type arguments to this method declaration in order to obtain a method model…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionDeclaration.invoke', 'type': 'function', 'url': 'meta/declaration/FunctionDeclaration.type.html#invoke', 'doc': '<p>Invokes the underlying toplevel function, by applying the specified type arguments and value arguments.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FunctionDeclaration.memberInvoke', 'type': 'function', 'url': 'meta/declaration/FunctionDeclaration.type.html#memberInvoke', 'doc': '<p>Invokes the underlying method, by applying the specified type arguments and value arguments.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FunctionDeclaration', 'type': 'interface', 'url': 'meta/declaration/FunctionDeclaration.type.html', 'doc': '<p>A function declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'nothingType.string', 'type': 'value', 'url': 'meta/declaration/nothingType.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'nothingType', 'type': 'object', 'url': 'meta/declaration/nothingType.object.html', 'doc': '<p>The singleton open type for <a class=\'link-custom-text\' href=\'index.html#nothing\' title=\'Go to ceylon.language::nothing\'>Nothing</a>.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'nothingType', 'type': 'value', 'url': 'meta/declaration/index.html#nothingType', 'doc': '<p>The singleton open type for <a class=\'link-custom-text\' href=\'index.html#nothing\' title=\'Go to ceylon.language::nothing\'>Nothing</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'OpenType', 'type': 'interface', 'url': 'meta/declaration/OpenType.type.html', 'doc': '<p>An open type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'AliasDeclaration.extendedType', 'type': 'value', 'url': 'meta/declaration/AliasDeclaration.type.html#extendedType', 'doc': '<p>The open type that is substituted by this type alias.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'AliasDeclaration', 'type': 'interface', 'url': 'meta/declaration/AliasDeclaration.type.html', 'doc': '<p>Type alias declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'OpenTypeVariable.declaration', 'type': 'value', 'url': 'meta/declaration/OpenTypeVariable.type.html#declaration', 'doc': '<p>This type variable\'s type parameter declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'OpenTypeVariable', 'type': 'interface', 'url': 'meta/declaration/OpenTypeVariable.type.html', 'doc': '<p>An open type variable.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ClassOrInterfaceDeclaration.extendedType', 'type': 'value', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#extendedType', 'doc': '<p>This type\'s extended type, unless this is the class for <a class=\'link-custom-text\' href=\'Anything.type.html\' title=\'Go to ceylon.language::Anything\'>Anything</a>, which\nis the root of…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.satisfiedTypes', 'type': 'value', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#satisfiedTypes', 'doc': '<p>The list of types satisfied by this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.caseTypes', 'type': 'value', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#caseTypes', 'doc': '<p>If this type has an <code>of</code> clause, this is the list of case types for the current type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.isAlias', 'type': 'value', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#isAlias', 'doc': '<p>True if this type is an alias type, in which case the <a class=\'link\' href=\'meta/declaration/ClassOrInterfaceDeclaration.type.html#extendedType\' title=\'Go to ceylon.language.meta.declaration::ClassOrInterfaceDeclaration.extendedType\'>extendedType</a> will\ncontain the substituted type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.memberDeclarations', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#memberDeclarations', 'doc': '<p>Returns the list of member declarations that satisfy the given <code>Kind</code> type argument.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.declaredMemberDeclarations', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#declaredMemberDeclarations', 'doc': '<p>Returns the list of member declarations that satisfy the given <code>Kind</code> type argument.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.annotatedMemberDeclarations', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#annotatedMemberDeclarations', 'doc': '<p>Returns the list of member declarations that satisfy the given <code>Kind</code> type argument and\nthat are annotated with the…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.annotatedDeclaredMemberDeclarations', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#annotatedDeclaredMemberDeclarations', 'doc': '<p>Returns the list of member declarations that satisfy the given <code>Kind</code> type argument and\nthat are annotated with the…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.getMemberDeclaration', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#getMemberDeclaration', 'doc': '<p>Looks up a member declaration by name, provided it satisfies the given <code>Kind</code> type\nargument.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.getDeclaredMemberDeclaration', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#getDeclaredMemberDeclaration', 'doc': '<p>Looks up a member declaration by name, provided it satisfies the given <code>Kind</code> type\nargument.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.apply', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#apply', 'doc': '<p>Applies the given closed type arguments to this toplevel class or interface declaration in order to obtain a class or…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration.memberApply', 'type': 'function', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html#memberApply', 'doc': '<p>Applies the given closed container type and type arguments to this member class or interface declaration in order to…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterfaceDeclaration', 'type': 'interface', 'url': 'meta/declaration/ClassOrInterfaceDeclaration.type.html', 'doc': '<p>A class or interface declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ValueDeclaration.variable', 'type': 'value', 'url': 'meta/declaration/ValueDeclaration.type.html#variable', 'doc': '<p>True if this declaration is annotated with <a class=\'link-custom-text\' href=\'index.html#variable\' title=\'Go to ceylon.language::variable\'>variable</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ValueDeclaration.apply', 'type': 'function', 'url': 'meta/declaration/ValueDeclaration.type.html#apply', 'doc': '<p>Applies this value declaration in order to obtain a value model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ValueDeclaration.memberApply', 'type': 'function', 'url': 'meta/declaration/ValueDeclaration.type.html#memberApply', 'doc': '<p>Applies the given closed container type to this attribute declaration in order to obtain an attribute model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ValueDeclaration.get', 'type': 'function', 'url': 'meta/declaration/ValueDeclaration.type.html#get', 'doc': '<p>Reads the current value of this toplevel value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ValueDeclaration.memberGet', 'type': 'function', 'url': 'meta/declaration/ValueDeclaration.type.html#memberGet', 'doc': '<p>Reads the current value of this attribute on the given container instance.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ValueDeclaration.set', 'type': 'function', 'url': 'meta/declaration/ValueDeclaration.type.html#set', 'doc': '<p>Sets the current value of this toplevel value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ValueDeclaration.memberSet', 'type': 'function', 'url': 'meta/declaration/ValueDeclaration.type.html#memberSet', 'doc': '<p>Sets the current value of this attribute on the given container instance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ValueDeclaration.setter', 'type': 'value', 'url': 'meta/declaration/ValueDeclaration.type.html#setter', 'doc': '<p>Returns the setter declaration for this variable.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ValueDeclaration', 'type': 'interface', 'url': 'meta/declaration/ValueDeclaration.type.html', 'doc': '<p>A value declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'OpenClassOrInterfaceType.declaration', 'type': 'value', 'url': 'meta/declaration/OpenClassOrInterfaceType.type.html#declaration', 'doc': '<p>The class or interface declaration for this open type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'OpenClassOrInterfaceType.extendedType', 'type': 'value', 'url': 'meta/declaration/OpenClassOrInterfaceType.type.html#extendedType', 'doc': '<p>The extended type of this open type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'OpenClassOrInterfaceType.satisfiedTypes', 'type': 'value', 'url': 'meta/declaration/OpenClassOrInterfaceType.type.html#satisfiedTypes', 'doc': '<p>The satisfied types of this open type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'OpenClassOrInterfaceType.typeArguments', 'type': 'value', 'url': 'meta/declaration/OpenClassOrInterfaceType.type.html#typeArguments', 'doc': '<p>The set of open type arguments.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'OpenClassOrInterfaceType', 'type': 'interface', 'url': 'meta/declaration/OpenClassOrInterfaceType.type.html', 'doc': '<p>An open class or interface, with open type arguments.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'OpenClassType.declaration', 'type': 'value', 'url': 'meta/declaration/OpenClassType.type.html#declaration', 'doc': '<p>This class declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'OpenClassType', 'type': 'interface', 'url': 'meta/declaration/OpenClassType.type.html', 'doc': '<p>An open class type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'FunctionOrValueDeclaration.parameter', 'type': 'value', 'url': 'meta/declaration/FunctionOrValueDeclaration.type.html#parameter', 'doc': '<p>True if this function or value is a parameter to a <a class=\'link\' href=\'meta/declaration/FunctionalDeclaration.type.html\' title=\'Go to ceylon.language.meta.declaration::FunctionalDeclaration\'>FunctionalDeclaration</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionOrValueDeclaration.defaulted', 'type': 'value', 'url': 'meta/declaration/FunctionOrValueDeclaration.type.html#defaulted', 'doc': '<p>True if this function or value is a parameter and has a default value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionOrValueDeclaration.variadic', 'type': 'value', 'url': 'meta/declaration/FunctionOrValueDeclaration.type.html#variadic', 'doc': '<p>True if this function or value is a parameter and is variadic (accepts a list of values).</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionOrValueDeclaration', 'type': 'interface', 'url': 'meta/declaration/FunctionOrValueDeclaration.type.html', 'doc': '<p>A function or value declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'TypeParameter.container', 'type': 'value', 'url': 'meta/declaration/TypeParameter.type.html#container', 'doc': '<p>The declaration that declared this type parameter.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'TypeParameter.defaulted', 'type': 'value', 'url': 'meta/declaration/TypeParameter.type.html#defaulted', 'doc': '<p>True if this type parameter has a default type argument and can be omitted.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'TypeParameter.defaultTypeArgument', 'type': 'value', 'url': 'meta/declaration/TypeParameter.type.html#defaultTypeArgument', 'doc': '<p>This type parameter\'s default type argument, if it has one.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'TypeParameter.variance', 'type': 'value', 'url': 'meta/declaration/TypeParameter.type.html#variance', 'doc': '<p>This type parameter\'s variance, as defined by <code>in</code> or <code>out</code> keywords.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'TypeParameter.satisfiedTypes', 'type': 'value', 'url': 'meta/declaration/TypeParameter.type.html#satisfiedTypes', 'doc': '<p>The <code>satisfies</code> upper bounds for this type parameter.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'TypeParameter.caseTypes', 'type': 'value', 'url': 'meta/declaration/TypeParameter.type.html#caseTypes', 'doc': '<p>The <code>of</code> enumerated bounds for this type parameter.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'TypeParameter', 'type': 'interface', 'url': 'meta/declaration/TypeParameter.type.html', 'doc': '<p>A type parameter declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'FunctionalDeclaration.annotation', 'type': 'value', 'url': 'meta/declaration/FunctionalDeclaration.type.html#annotation', 'doc': '<p>True if the current declaration is an annotation class or function.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionalDeclaration.parameterDeclarations', 'type': 'value', 'url': 'meta/declaration/FunctionalDeclaration.type.html#parameterDeclarations', 'doc': '<p>The list of parameter declarations for this functional declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionalDeclaration.getParameterDeclaration', 'type': 'function', 'url': 'meta/declaration/FunctionalDeclaration.type.html#getParameterDeclaration', 'doc': '<p>Gets a parameter declaration by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionalDeclaration', 'type': 'interface', 'url': 'meta/declaration/FunctionalDeclaration.type.html', 'doc': '<p>Declaration which can be invoked, and may have parameters.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ClassDeclaration.abstract', 'type': 'value', 'url': 'meta/declaration/ClassDeclaration.type.html#abstract', 'doc': '<p>True if the class has an <a class=\'link-custom-text\' href=\'index.html#abstract\' title=\'Go to ceylon.language::abstract\'>abstract</a> annotation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassDeclaration.anonymous', 'type': 'value', 'url': 'meta/declaration/ClassDeclaration.type.html#anonymous', 'doc': '<p>True if the class is an object class.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassDeclaration.final', 'type': 'value', 'url': 'meta/declaration/ClassDeclaration.type.html#final', 'doc': '<p>True if the class has a <a class=\'link-custom-text\' href=\'index.html#final\' title=\'Go to ceylon.language::final\'>final</a> annotation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassDeclaration.classApply', 'type': 'function', 'url': 'meta/declaration/ClassDeclaration.type.html#classApply', 'doc': '<p>Applies the given closed type arguments to this toplevel class declaration in order to obtain a class model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassDeclaration.memberClassApply', 'type': 'function', 'url': 'meta/declaration/ClassDeclaration.type.html#memberClassApply', 'doc': '<p>Applies the given closed container type and type arguments to this member class declaration in order to obtain a member…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassDeclaration.instantiate', 'type': 'function', 'url': 'meta/declaration/ClassDeclaration.type.html#instantiate', 'doc': '<p>Creates a new instance of this toplevel class, by applying the specified type arguments and value arguments.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ClassDeclaration.memberInstantiate', 'type': 'function', 'url': 'meta/declaration/ClassDeclaration.type.html#memberInstantiate', 'doc': '<p>Creates a new instance of this member class, by applying the specified type arguments and value arguments.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ClassDeclaration', 'type': 'interface', 'url': 'meta/declaration/ClassDeclaration.type.html', 'doc': '<p>Class declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'OpenInterfaceType.declaration', 'type': 'value', 'url': 'meta/declaration/OpenInterfaceType.type.html#declaration', 'doc': '<p>This declaration\'s package container.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'OpenInterfaceType', 'type': 'interface', 'url': 'meta/declaration/OpenInterfaceType.type.html', 'doc': '<p>An open interface type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Module.version', 'type': 'value', 'url': 'meta/declaration/Module.type.html#version', 'doc': '<p>The module version.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Module.members', 'type': 'value', 'url': 'meta/declaration/Module.type.html#members', 'doc': '<p>The package members of the module.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Module.dependencies', 'type': 'value', 'url': 'meta/declaration/Module.type.html#dependencies', 'doc': '<p>The modules this module depends on.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Module.findPackage', 'type': 'function', 'url': 'meta/declaration/Module.type.html#findPackage', 'doc': '<p>Finds a package by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Module.findImportedPackage', 'type': 'function', 'url': 'meta/declaration/Module.type.html#findImportedPackage', 'doc': '<p>Finds a package by name in this module or in its dependencies.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Module', 'type': 'interface', 'url': 'meta/declaration/Module.type.html', 'doc': '<p>A <code>module</code> declaration\nfrom a <code>module.ceylon</code> compilation unit</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Import.name', 'type': 'value', 'url': 'meta/declaration/Import.type.html#name', 'doc': '<p>The name of the imported module.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Import.version', 'type': 'value', 'url': 'meta/declaration/Import.type.html#version', 'doc': '<p>The compile-time version of the imported module.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Import.shared', 'type': 'value', 'url': 'meta/declaration/Import.type.html#shared', 'doc': '<p>True if this imported module is shared.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Import.optional', 'type': 'value', 'url': 'meta/declaration/Import.type.html#optional', 'doc': '<p>True if this imported module is optional.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Import.container', 'type': 'value', 'url': 'meta/declaration/Import.type.html#container', 'doc': '<p>The containing module.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Import', 'type': 'interface', 'url': 'meta/declaration/Import.type.html', 'doc': '<p>Model of an <code>import</code> declaration\nwithin a module declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Package.container', 'type': 'value', 'url': 'meta/declaration/Package.type.html#container', 'doc': '<p>The module this package belongs to.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.shared', 'type': 'value', 'url': 'meta/declaration/Package.type.html#shared', 'doc': '<p>True if this package is shared.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.members', 'type': 'function', 'url': 'meta/declaration/Package.type.html#members', 'doc': '<p>Returns the list of member declarations that satisfy the given <code>Kind</code> type argument.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.annotatedMembers', 'type': 'function', 'url': 'meta/declaration/Package.type.html#annotatedMembers', 'doc': '<p>Returns the list of member declarations that satisfy the given <code>Kind</code> type argument and\nthat are annotated with the…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.getMember', 'type': 'function', 'url': 'meta/declaration/Package.type.html#getMember', 'doc': '<p>Looks up a member declaration by name, provided it satisfies the given <code>Kind</code> type\nargument.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.getValue', 'type': 'function', 'url': 'meta/declaration/Package.type.html#getValue', 'doc': '<p>The value with the given name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.getClassOrInterface', 'type': 'function', 'url': 'meta/declaration/Package.type.html#getClassOrInterface', 'doc': '<p>The class or interface with the given name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.getFunction', 'type': 'function', 'url': 'meta/declaration/Package.type.html#getFunction', 'doc': '<p>The function with the given name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package.getAlias', 'type': 'function', 'url': 'meta/declaration/Package.type.html#getAlias', 'doc': '<p>The type alias with the given name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Package', 'type': 'interface', 'url': 'meta/declaration/Package.type.html', 'doc': '<p>Model of a <code>package</code> declaration\nfrom a <code>package.ceylon</code> compilation unit</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'AnnotatedDeclaration.annotations', 'type': 'function', 'url': 'meta/declaration/AnnotatedDeclaration.type.html#annotations', 'doc': '<p>The annotation instances of the given\nannotation type on this declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'AnnotatedDeclaration', 'type': 'interface', 'url': 'meta/declaration/AnnotatedDeclaration.type.html', 'doc': '<p>Declaration which can be annotated, such as:</p>\n<ul>\n<li><a class=\'link\' href=\'meta/declaration/NestableDeclaration.type.html\' title=\'Go to ceylon.language.meta.declaration::NestableDeclaration\'>NestableDeclaration</a></li>\n<li><a class=\'link\' href=\'meta/declaration/Module.type.html\' title=\'Go to ceylon.language.meta.declaration::Module\'>Module</a></li>\n<li><a class=\'link\' href=\'meta/declaration/Package.type.html\' title=\'Go to ceylon.language.meta.declaration::Package\'>Package</a></li>\n</ul>\n<p>You can query…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Variance', 'type': 'interface', 'url': 'meta/declaration/Variance.type.html', 'doc': '<p>Variance information.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'invariant.string', 'type': 'value', 'url': 'meta/declaration/invariant.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'invariant', 'type': 'object', 'url': 'meta/declaration/invariant.object.html', 'doc': '<p>Invariant means that neither subtype nor supertype can be accepted, the\ntype has to be exactly that which is declared.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'invariant', 'type': 'value', 'url': 'meta/declaration/index.html#invariant', 'doc': '<p>Invariant means that neither subtype nor supertype can be accepted, the\ntype has to be exactly that which is declared.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'covariant.string', 'type': 'value', 'url': 'meta/declaration/covariant.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'covariant', 'type': 'object', 'url': 'meta/declaration/covariant.object.html', 'doc': '<p>Covariant means that subtypes of the given type may be returned.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'covariant', 'type': 'value', 'url': 'meta/declaration/index.html#covariant', 'doc': '<p>Covariant means that subtypes of the given type may be returned.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'contravariant.string', 'type': 'value', 'url': 'meta/declaration/contravariant.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'contravariant', 'type': 'object', 'url': 'meta/declaration/contravariant.object.html', 'doc': '<p>Contravariant means that supertypes of the given type may be accepted.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'contravariant', 'type': 'value', 'url': 'meta/declaration/index.html#contravariant', 'doc': '<p>Contravariant means that supertypes of the given type may be accepted.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Declaration.name', 'type': 'value', 'url': 'meta/declaration/Declaration.type.html#name', 'doc': '<p>The name of this declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Declaration.qualifiedName', 'type': 'value', 'url': 'meta/declaration/Declaration.type.html#qualifiedName', 'doc': '<p>The qualified name of this declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Declaration', 'type': 'interface', 'url': 'meta/declaration/Declaration.type.html', 'doc': '<p>A declaration.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ceylon.language.meta.model', 'type': 'package', 'url': 'meta/model/index.html', 'doc': '<p>The Ceylon metamodel closed type and model package.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'FunctionModel.declaration', 'type': 'value', 'url': 'meta/model/FunctionModel.type.html#declaration', 'doc': '<p>This function\'s declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'FunctionModel.type', 'type': 'value', 'url': 'meta/model/FunctionModel.type.html#type', 'doc': '<p>This function\'s return closed type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionModel.parameterTypes', 'type': 'value', 'url': 'meta/model/FunctionModel.type.html#parameterTypes', 'doc': '<p>This function\'s parameter closed types</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'FunctionModel', 'type': 'interface', 'url': 'meta/model/FunctionModel.type.html', 'doc': '<p>A function model represents the model of a Ceylon function that you can inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'MemberClass.bind', 'type': 'function', 'url': 'meta/model/MemberClass.type.html#bind', 'doc': '<p>Type-unsafe container binding, to be used when the container type is unknown until runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'MemberClass', 'type': 'interface', 'url': 'meta/model/MemberClass.type.html', 'doc': '<p>A class model represents the model of a Ceylon class that you can instantiate and inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Class.apply', 'type': 'function', 'url': 'meta/model/Class.type.html#apply', 'doc': '<p>Type-unsafe initialiser application, to be used when the argument types are unknown until runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Class', 'type': 'interface', 'url': 'meta/model/Class.type.html', 'doc': '<p>A class model represents the model of a Ceylon class that you can instantiate and inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'MutationException', 'type': 'class', 'url': 'meta/model/MutationException.type.html', 'doc': '<p>Thrown when you try to change the value of a non-variable value</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ClassOrInterface.declaration', 'type': 'value', 'url': 'meta/model/ClassOrInterface.type.html#declaration', 'doc': '<p>The declaration for this class or interface.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'ClassOrInterface.extendedType', 'type': 'value', 'url': 'meta/model/ClassOrInterface.type.html#extendedType', 'doc': '<p>The extended closed type for this class or interface.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.satisfiedTypes', 'type': 'value', 'url': 'meta/model/ClassOrInterface.type.html#satisfiedTypes', 'doc': '<p>The list of closed types that this class or interface satisfies.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getClassOrInterface', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getClassOrInterface', 'doc': '<p>Gets a member class or interface by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getDeclaredClassOrInterface', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getDeclaredClassOrInterface', 'doc': '<p>Gets a member class or interface by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getClass', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getClass', 'doc': '<p>Gets a member class by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getDeclaredClass', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getDeclaredClass', 'doc': '<p>Gets a member class by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getInterface', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getInterface', 'doc': '<p>Gets a member interface by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getDeclaredInterface', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getDeclaredInterface', 'doc': '<p>Gets a member interface by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getMethod', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getMethod', 'doc': '<p>Gets a method by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getDeclaredMethod', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getDeclaredMethod', 'doc': '<p>Gets a method by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getAttribute', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getAttribute', 'doc': '<p>Gets an attribute by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface.getDeclaredAttribute', 'type': 'function', 'url': 'meta/model/ClassOrInterface.type.html#getDeclaredAttribute', 'doc': '<p>Gets an attribute by name.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassOrInterface', 'type': 'interface', 'url': 'meta/model/ClassOrInterface.type.html', 'doc': '<p>Model of a class or interface that you can inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'nothingType.string', 'type': 'value', 'url': 'meta/model/nothingType.object.html#string', 'doc': '<p>A developer-friendly string representing the\ninstance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'nothingType.typeOf', 'type': 'function', 'url': 'meta/model/nothingType.object.html#typeOf', 'doc': '<p>True if the given instance is of this type, or is of a subtype of this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'nothingType.supertypeOf', 'type': 'function', 'url': 'meta/model/nothingType.object.html#supertypeOf', 'doc': '<p>True if the given type is a supertype of this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'nothingType.subtypeOf', 'type': 'function', 'url': 'meta/model/nothingType.object.html#subtypeOf', 'doc': '<p>True if the given type is a subtype of this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'nothingType.exactly', 'type': 'function', 'url': 'meta/model/nothingType.object.html#exactly', 'doc': '<p>True if the given type is a exactly this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'nothingType', 'type': 'object', 'url': 'meta/model/nothingType.object.html', 'doc': '<p>The singleton closed type for <a class=\'link-custom-text\' href=\'index.html#nothing\' title=\'Go to ceylon.language::nothing\'>Nothing</a>.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'nothingType', 'type': 'value', 'url': 'meta/model/index.html#nothingType', 'doc': '<p>The singleton closed type for <a class=\'link-custom-text\' href=\'index.html#nothing\' title=\'Go to ceylon.language::nothing\'>Nothing</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Type.typeOf', 'type': 'function', 'url': 'meta/model/Type.type.html#typeOf', 'doc': '<p>True if the given instance is of this type, or is of a subtype of this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Type.supertypeOf', 'type': 'function', 'url': 'meta/model/Type.type.html#supertypeOf', 'doc': '<p>True if the given type is a supertype of this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Type.subtypeOf', 'type': 'function', 'url': 'meta/model/Type.type.html#subtypeOf', 'doc': '<p>True if the given type is a subtype of this type.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Type.exactly', 'type': 'function', 'url': 'meta/model/Type.type.html#exactly', 'doc': '<p>True if the given type is a exactly this type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Type', 'type': 'interface', 'url': 'meta/model/Type.type.html', 'doc': '<p>A closed type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ValueModel.declaration', 'type': 'value', 'url': 'meta/model/ValueModel.type.html#declaration', 'doc': '<p>This value\'s declaration.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'ValueModel.type', 'type': 'value', 'url': 'meta/model/ValueModel.type.html#type', 'doc': '<p>This value\'s closed type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ValueModel', 'type': 'interface', 'url': 'meta/model/ValueModel.type.html', 'doc': '<p>A value model represents the model of a Ceylon value that you can inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'IntersectionType.satisfiedTypes', 'type': 'value', 'url': 'meta/model/IntersectionType.type.html#satisfiedTypes', 'doc': '<p>The list of closed satisfied types of this intersection.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'IntersectionType', 'type': 'interface', 'url': 'meta/model/IntersectionType.type.html', 'doc': '<p>A closed intersection type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'MemberInterface.bind', 'type': 'function', 'url': 'meta/model/MemberInterface.type.html#bind', 'doc': '<p>Type-unsafe container binding, to be used when the container type is unknown until runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'MemberInterface', 'type': 'interface', 'url': 'meta/model/MemberInterface.type.html', 'doc': '<p>A member interface model that you can inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ClassModel.declaration', 'type': 'value', 'url': 'meta/model/ClassModel.type.html#declaration', 'doc': '<p>The declaration for this model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'ClassModel.parameterTypes', 'type': 'value', 'url': 'meta/model/ClassModel.type.html#parameterTypes', 'doc': '<p>This function\'s parameter closed types</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ClassModel', 'type': 'interface', 'url': 'meta/model/ClassModel.type.html', 'doc': '<p>A class model represents the model of a Ceylon class that you can inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'TypeApplicationException', 'type': 'class', 'url': 'meta/model/TypeApplicationException.type.html', 'doc': '<p>Thrown when declarations are applied with invalid or incompatible type arguments.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Value.get', 'type': 'function', 'url': 'meta/model/Value.type.html#get', 'doc': '<p>Reads the current value for this value binding.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Value.set', 'type': 'function', 'url': 'meta/model/Value.type.html#set', 'doc': '<p>Changes this variable\'s value to the given new value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Value.setIfAssignable', 'type': 'function', 'url': 'meta/model/Value.type.html#setIfAssignable', 'doc': '<p>Non type-safe equivalent to <a class=\'link\' href=\'meta/model/Value.type.html#set\' title=\'Go to ceylon.language.meta.model::Value.set\'>Value.set</a>, to be used when you don\'t know the\nvariable type at compile-time.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Value', 'type': 'interface', 'url': 'meta/model/Value.type.html', 'doc': '<p>A value model represents the model of a Ceylon value that you can read and inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Interface', 'type': 'interface', 'url': 'meta/model/Interface.type.html', 'doc': '<p>An interface model that you can inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'IncompatibleTypeException', 'type': 'class', 'url': 'meta/model/IncompatibleTypeException.type.html', 'doc': '<p>Thrown when you invoke metamodel methods with invalid or incompatible type arguments.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Function.apply', 'type': 'function', 'url': 'meta/model/Function.type.html#apply', 'doc': '<p>Type-unsafe function application, to be used when the argument types are unknown until runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Function', 'type': 'interface', 'url': 'meta/model/Function.type.html', 'doc': '<p>A function model represents the model of a Ceylon function that you can invoke and inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Model.container', 'type': 'value', 'url': 'meta/model/Model.type.html#container', 'doc': '<p>The container type of this model, or <code>null</code> if this is a toplevel model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Model.declaration', 'type': 'value', 'url': 'meta/model/Model.type.html#declaration', 'doc': '<p>The declaration for this model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Model', 'type': 'interface', 'url': 'meta/model/Model.type.html', 'doc': '<p>The root of all models.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Attribute.bind', 'type': 'function', 'url': 'meta/model/Attribute.type.html#bind', 'doc': '<p>Type-unsafe container binding, to be used when the container type is unknown until runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Attribute', 'type': 'interface', 'url': 'meta/model/Attribute.type.html', 'doc': '<p>An attribute model represents the model of a Ceylon attribute that you can read and inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'UnionType.caseTypes', 'type': 'value', 'url': 'meta/model/UnionType.type.html#caseTypes', 'doc': '<p>The list of closed case types of this union.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'UnionType', 'type': 'interface', 'url': 'meta/model/UnionType.type.html', 'doc': '<p>A closed union type.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'InterfaceModel.declaration', 'type': 'value', 'url': 'meta/model/InterfaceModel.type.html#declaration', 'doc': '<p>The declaration for this model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'InterfaceModel', 'type': 'interface', 'url': 'meta/model/InterfaceModel.type.html', 'doc': '<p>An interface model represents the model of a Ceylon interface that you can inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Method.bind', 'type': 'function', 'url': 'meta/model/Method.type.html#bind', 'doc': '<p>Type-unsafe container binding, to be used when the container type is unknown until runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal', 'icon-decoration-impl']},
{'name': 'Method', 'type': 'interface', 'url': 'meta/model/Method.type.html', 'doc': '<p>A function model represents the model of a Ceylon function that you can invoke and inspect.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Generic.typeArguments', 'type': 'value', 'url': 'meta/model/Generic.type.html#typeArguments', 'doc': '<p>The map of type parameter declaration to type arguments for this generic model.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Generic', 'type': 'interface', 'url': 'meta/model/Generic.type.html', 'doc': '<p>A generic model which has closed type arguments.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'InvocationException', 'type': 'class', 'url': 'meta/model/InvocationException.type.html', 'doc': '<p>Thrown when attempting to invoke something which can\'t be invoked, like abstract class\ninitialisers.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Member.declaringType', 'type': 'value', 'url': 'meta/model/Member.type.html#declaringType', 'doc': '<p>The declaring closed type.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Member.bind', 'type': 'function', 'url': 'meta/model/Member.type.html#bind', 'doc': '<p>Type-unsafe container binding, to be used when the container type is unknown until runtime.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Member', 'type': 'interface', 'url': 'meta/model/Member.type.html', 'doc': '<p>Model for members that can be bound to a containing instance to turn them into toplevel models.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ceylon.language', 'type': 'module', 'url': 'index.html', 'doc': '<p>The Ceylon language module containing the core types\nreferred to in the language specification.</p>\n', 'tags': [],'icons': []}];
var tagIndex = [
];
